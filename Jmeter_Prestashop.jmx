<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="apikey" elementType="Argument">
            <stringProp name="Argument.name">apikey</stringProp>
            <stringProp name="Argument.value">24JIPG2FEVKM3A71AXVP6YVY4WPJA43B5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kategori_digerid" elementType="Argument">
            <stringProp name="Argument.name">kategori_digerid</stringProp>
            <stringProp name="Argument.value">34</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presta_categoryId" elementType="Argument">
            <stringProp name="Argument.name">presta_categoryId</stringProp>
            <stringProp name="Argument.value">8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presta_brandId" elementType="Argument">
            <stringProp name="Argument.name">presta_brandId</stringProp>
            <stringProp name="Argument.value">9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presta_campaignId" elementType="Argument">
            <stringProp name="Argument.name">presta_campaignId</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presta_magazaId" elementType="Argument">
            <stringProp name="Argument.name">presta_magazaId</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presta_tumkampanyalarId" elementType="Argument">
            <stringProp name="Argument.name">presta_tumkampanyalarId</stringProp>
            <stringProp name="Argument.value">34</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presta_kadinId" elementType="Argument">
            <stringProp name="Argument.name">presta_kadinId</stringProp>
            <stringProp name="Argument.value">13</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presta_erkekId" elementType="Argument">
            <stringProp name="Argument.name">presta_erkekId</stringProp>
            <stringProp name="Argument.value">14</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presta_cocukId" elementType="Argument">
            <stringProp name="Argument.name">presta_cocukId</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presta_evyasamId" elementType="Argument">
            <stringProp name="Argument.name">presta_evyasamId</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presta_tesetturId" elementType="Argument">
            <stringProp name="Argument.name">presta_tesetturId</stringProp>
            <stringProp name="Argument.value">21</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Suppliers" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="supplierId_trendyol" elementType="Argument">
            <stringProp name="Argument.name">supplierId_trendyol</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplierId_markafoni" elementType="Argument">
            <stringProp name="Argument.name">supplierId_markafoni</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplierId_morhipo" elementType="Argument">
            <stringProp name="Argument.name">supplierId_morhipo</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplierId_modanisa" elementType="Argument">
            <stringProp name="Argument.name">supplierId_modanisa</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="catShopId_trendyol" elementType="Argument">
            <stringProp name="Argument.name">catShopId_trendyol</stringProp>
            <stringProp name="Argument.value">36</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="catShopId_markafoni" elementType="Argument">
            <stringProp name="Argument.name">catShopId_markafoni</stringProp>
            <stringProp name="Argument.value">37</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="catShopId_morhipo" elementType="Argument">
            <stringProp name="Argument.name">catShopId_morhipo</stringProp>
            <stringProp name="Argument.value">38</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplierId_boyner" elementType="Argument">
            <stringProp name="Argument.name">supplierId_boyner</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplierId_koton" elementType="Argument">
            <stringProp name="Argument.name">supplierId_koton</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplierId_lcw" elementType="Argument">
            <stringProp name="Argument.name">supplierId_lcw</stringProp>
            <stringProp name="Argument.value">12</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplierId_defacto" elementType="Argument">
            <stringProp name="Argument.name">supplierId_defacto</stringProp>
            <stringProp name="Argument.value">13</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplierId_hm" elementType="Argument">
            <stringProp name="Argument.name">supplierId_hm</stringProp>
            <stringProp name="Argument.value">14</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplierId_hepsiburada" elementType="Argument">
            <stringProp name="Argument.name">supplierId_hepsiburada</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplierId_n11" elementType="Argument">
            <stringProp name="Argument.name">supplierId_n11</stringProp>
            <stringProp name="Argument.value">16</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="FeatureValues" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="featureValueId_trendyol" elementType="Argument">
            <stringProp name="Argument.name">featureValueId_trendyol</stringProp>
            <stringProp name="Argument.value">35</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="featureValueId_markafoni" elementType="Argument">
            <stringProp name="Argument.name">featureValueId_markafoni</stringProp>
            <stringProp name="Argument.value">36</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="featureValueId_morhipo" elementType="Argument">
            <stringProp name="Argument.name">featureValueId_morhipo</stringProp>
            <stringProp name="Argument.value">37</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="CmsPageIds" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Id_Cms_Brands" elementType="Argument">
            <stringProp name="Argument.name">Id_Cms_Brands</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Id_Cms_Categories" elementType="Argument">
            <stringProp name="Argument.name">Id_Cms_Categories</stringProp>
            <stringProp name="Argument.value">8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SubMenuCategories" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="subCatId_kadinGiyim" elementType="Argument">
            <stringProp name="Argument.name">subCatId_kadinGiyim</stringProp>
            <stringProp name="Argument.value">16</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_kadinAyakkabi" elementType="Argument">
            <stringProp name="Argument.name">subCatId_kadinAyakkabi</stringProp>
            <stringProp name="Argument.value">17</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_kadinCanta" elementType="Argument">
            <stringProp name="Argument.name">subCatId_kadinCanta</stringProp>
            <stringProp name="Argument.value">18</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_kadinKozmetik" elementType="Argument">
            <stringProp name="Argument.name">subCatId_kadinKozmetik</stringProp>
            <stringProp name="Argument.value">19</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_kadinAksesuar" elementType="Argument">
            <stringProp name="Argument.name">subCatId_kadinAksesuar</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_kadinTesettur" elementType="Argument">
            <stringProp name="Argument.name">subCatId_kadinTesettur</stringProp>
            <stringProp name="Argument.value">21</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_kadinSpor" elementType="Argument">
            <stringProp name="Argument.name">subCatId_kadinSpor</stringProp>
            <stringProp name="Argument.value">22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_erkekGiyim" elementType="Argument">
            <stringProp name="Argument.name">subCatId_erkekGiyim</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_erkekAyakkabi" elementType="Argument">
            <stringProp name="Argument.name">subCatId_erkekAyakkabi</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_erkekCanta" elementType="Argument">
            <stringProp name="Argument.name">subCatId_erkekCanta</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_erkekKozmetik" elementType="Argument">
            <stringProp name="Argument.name">subCatId_erkekKozmetik</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_erkekAksesuar" elementType="Argument">
            <stringProp name="Argument.name">subCatId_erkekAksesuar</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="subCatId_erkekSpor" elementType="Argument">
            <stringProp name="Argument.name">subCatId_erkekSpor</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MySQL connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">mysqlcon</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://YOURIPADDRESS:3306/oolurcom_pres951?characterEncoding=utf8&amp;useUnicode=true&amp;characterSetResults=utf8&amp;connectionCollation=utf8_general_ci</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">Ok264380*</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">oolurcom_jmeter</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HM-WOMAN" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.MarkProductsForDeactivation" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hm} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HM.woman" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HM.womanProducts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www2.hm.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tr_tr/kadin/urune-gore-satin-al/view-all.html?product-type=ladies_all&amp;sort=stock&amp;offset=0&amp;page-size=120</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productUrls</stringProp>
              <stringProp name="RegexExtractor.regex">product-item-heading&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOURL</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">product-item-heading&quot;&gt;
				&lt;a href=&quot;/tr_tr/productpage.0434429017.html&quot;&gt;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
              <stringProp name="RegexExtractor.regex">product-item-heading&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot;&gt;(.+?)&lt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">&lt;meta name=&quot;ProductName&quot; content=&quot;Bluz&quot; /&gt;
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productTitles</stringProp>
              <stringProp name="RegexExtractor.regex">product-item-heading&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot;&gt;(.+?)&lt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Name: &apos;Plise Etek&apos;,Category:
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productPics</stringProp>
              <stringProp name="RegexExtractor.regex">src=&quot;\/\/lp2.hm.com\/hmprod(.+?)&quot;\s+data-altimage</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">src=&quot;//lp2.hm.com/hmprod?set=source[/environment/2016/7YM_0274_005R.jpg],rotate[-1.1499999999999961],width[4256],height[4977],x[633],y[123],type[FASHION_FRONT]&amp;hmver=0&amp;call=url[file:/product/main]&quot; data-altimage</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
              <stringProp name="RegexExtractor.regex">class=&quot;price&quot;&gt;\s+(.+?) TL</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Gender:&apos;Kadın&apos;,SalePrice:&apos;59.99 TL&apos;,D</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
            <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
            <stringProp name="ForeachController.inputVal">productUrls</stringProp>
            <stringProp name="ForeachController.returnVal">productUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
              <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HM.ProductDetail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www2.hm.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${new_url}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">product-size&quot; value=&quot;(.+?)&quot; data-code</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">name=&quot;product-size&quot; value=&quot;XS&quot; data-code</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productColors</stringProp>
                <stringProp name="RegexExtractor.regex">title=&quot;(.+?)&quot; data-articlecode</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">title=&quot;Güvercin mavisi&quot; data-articlecode</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;HM - Kadın&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;H&amp;M&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;H&amp;M&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g2)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);

String newTitle =&quot;&quot; + &quot;${__V(productTitles_${counter_price}_g2)}&quot;;
vars.put(&quot;productTitle&quot;, newTitle);


String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;/${__V(productSizes_1_g1)}/${__V(productSizes_2_g1)}/${__V(productSizes_3_g1)}/${__V(productSizes_4_g1)}/${__V(productSizes_5_g1)}/${__V(productSizes_6_g1)}/${__V(productSizes_7_g1)}/${__V(productSizes_8_g1)}/${__V(productSizes_9_g1)}/${__V(productSizes_10_g1)}/${__V(productColors_1_g1)}/${__V(productColors_2_g1)}/${__V(productColors_3_g1)}/${__V(productColors_4_g1)}/${__V(productColors_5_g1)}/${__V(productColors_6_g1)}/${__V(productColors_7_g1)}/${__V(productColors_8_g1)}/&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCategory</stringProp>
              <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultBrand</stringProp>
              <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EcommerceAPI..insert-featurevalue-marka" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">4</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EcommerceAPI.INSERT.NewProduct" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_hm}&quot;&gt;&lt;![CDATA[${supplierId_hm}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www2.hm.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/products</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productId</stringProp>
                <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 13) as onuc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 14) as ondort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 15) as onbes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 16) as onalti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 17) as onyedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 18) as onsekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 19) as ondokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 20) as yirmi))

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">productSizeIds</stringProp>
              <stringProp name="variableNames">productSizeIds</stringProp>
            </JDBCSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
              <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
              <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EcommerceAPI.INSERT.NewProduct.SizeAndColors" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HM.getProductPicture1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">lp2.hm.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/hmprod${new_picture}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">${__property(user.dir)}/images/hm/hm_${productId}_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <stringProp name="FileSaver.variablename">testimagefile</stringProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EcommerceAPI.INSERT.NewProduct.Image" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${testimagefile}</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype"></stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.DeactivateMarkedProducts" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hm} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HM-ERKEK" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=2 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hm} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HM.erkek" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HM.erkek" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www2.hm.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tr_tr/erkek/urune-gore-satin-al/view-all.html?product-type=men_all&amp;sort=stock&amp;offset=0&amp;page-size=120</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productUrls</stringProp>
              <stringProp name="RegexExtractor.regex">product-item-heading&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOURL</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">product-item-heading&quot;&gt;
				&lt;a href=&quot;/tr_tr/productpage.0434429017.html&quot;&gt;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
              <stringProp name="RegexExtractor.regex">product-item-heading&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot;&gt;(.+?)&lt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">&lt;meta name=&quot;ProductName&quot; content=&quot;Bluz&quot; /&gt;
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productTitles</stringProp>
              <stringProp name="RegexExtractor.regex">product-item-heading&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot;&gt;(.+?)&lt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Name: &apos;Plise Etek&apos;,Category:
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productPics</stringProp>
              <stringProp name="RegexExtractor.regex">src=&quot;\/\/lp2.hm.com\/hmprod(.+?)&quot;\s+data-altimage</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">src=&quot;//lp2.hm.com/hmprod?set=source[/environment/2016/7YM_0274_005R.jpg],rotate[-1.1499999999999961],width[4256],height[4977],x[633],y[123],type[FASHION_FRONT]&amp;hmver=0&amp;call=url[file:/product/main]&quot; data-altimage</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
              <stringProp name="RegexExtractor.regex">class=&quot;price&quot;&gt;\s+(.+?) TL</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Gender:&apos;Kadın&apos;,SalePrice:&apos;59.99 TL&apos;,D</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
            <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
            <stringProp name="ForeachController.inputVal">productUrls</stringProp>
            <stringProp name="ForeachController.returnVal">productUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
              <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEF.urunDetay" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www2.hm.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${new_url}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">product-size&quot; value=&quot;(.+?)&quot; data-code</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">name=&quot;product-size&quot; value=&quot;XS&quot; data-code</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productColors</stringProp>
                <stringProp name="RegexExtractor.regex">title=&quot;(.+?)&quot; data-articlecode</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">title=&quot;Güvercin mavisi&quot; data-articlecode</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;HM - Erkek&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;H&amp;M&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;H&amp;M&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g2)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);

String newTitle =&quot;&quot; + &quot;${__V(productTitles_${counter_price}_g2)}&quot;;
vars.put(&quot;productTitle&quot;, newTitle);


String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;/${__V(productSizes_1_g1)}/${__V(productSizes_2_g1)}/${__V(productSizes_3_g1)}/${__V(productSizes_4_g1)}/${__V(productSizes_5_g1)}/${__V(productSizes_6_g1)}/${__V(productSizes_7_g1)}/${__V(productSizes_8_g1)}/${__V(productSizes_9_g1)}/${__V(productSizes_10_g1)}/${__V(productColors_1_g1)}/${__V(productColors_2_g1)}/${__V(productColors_3_g1)}/${__V(productColors_4_g1)}/${__V(productColors_5_g1)}/${__V(productColors_6_g1)}/${__V(productColors_7_g1)}/${__V(productColors_8_g1)}/&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCategory</stringProp>
              <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultBrand</stringProp>
              <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCampaign</stringProp>
              <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultMagaza</stringProp>
              <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">4</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
              <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/erkekSubcategorySetter.bsh</stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_hm}&quot;&gt;&lt;![CDATA[${supplierId_hm}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www2.hm.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_erkekId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_erkekId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/products</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productId</stringProp>
                <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 13) as onuc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 14) as ondort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 15) as onbes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 16) as onalti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 17) as onyedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 18) as onsekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 19) as ondokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 20) as yirmi))

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">productSizeIds</stringProp>
              <stringProp name="variableNames">productSizeIds</stringProp>
            </JDBCSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
              <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
              <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">lp2.hm.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/hmprod${new_picture}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">${__property(user.dir)}/images/hm/hm_${productId}_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <stringProp name="FileSaver.variablename">testimagefile</stringProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${testimagefile}</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype"></stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=2 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hm} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HM-COCUK" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=3 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hm} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HM.cocuk" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HM.cocuk" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www2.hm.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tr_tr/cocuk/urune-gore-satin-al/view-all.html?product-type=kids_all&amp;sort=stock&amp;offset=0&amp;page-size=120</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productUrls</stringProp>
              <stringProp name="RegexExtractor.regex">product-item-heading&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOURL</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">product-item-heading&quot;&gt;
				&lt;a href=&quot;/tr_tr/productpage.0434429017.html&quot;&gt;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
              <stringProp name="RegexExtractor.regex">product-item-heading&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot;&gt;(.+?)&lt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">&lt;meta name=&quot;ProductName&quot; content=&quot;Bluz&quot; /&gt;
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productTitles</stringProp>
              <stringProp name="RegexExtractor.regex">product-item-heading&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot;&gt;(.+?)&lt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Name: &apos;Plise Etek&apos;,Category:
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productPics</stringProp>
              <stringProp name="RegexExtractor.regex">src=&quot;\/\/lp2.hm.com\/hmprod(.+?)&quot;\s+data-altimage</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">src=&quot;//lp2.hm.com/hmprod?set=source[/environment/2016/7YM_0274_005R.jpg],rotate[-1.1499999999999961],width[4256],height[4977],x[633],y[123],type[FASHION_FRONT]&amp;hmver=0&amp;call=url[file:/product/main]&quot; data-altimage</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
              <stringProp name="RegexExtractor.regex">class=&quot;price&quot;&gt;\s+(.+?) TL</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Gender:&apos;Kadın&apos;,SalePrice:&apos;59.99 TL&apos;,D</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
            <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
            <stringProp name="ForeachController.inputVal">productUrls</stringProp>
            <stringProp name="ForeachController.returnVal">productUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
              <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEF.urunDetay" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www2.hm.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${new_url}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">product-size&quot; value=&quot;(.+?)&quot; data-code</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">name=&quot;product-size&quot; value=&quot;XS&quot; data-code</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productColors</stringProp>
                <stringProp name="RegexExtractor.regex">title=&quot;(.+?)&quot; data-articlecode</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">title=&quot;Güvercin mavisi&quot; data-articlecode</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;HM - Çocuk&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;H&amp;M&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;H&amp;M&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g2)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);

String newTitle =&quot;&quot; + &quot;${__V(productTitles_${counter_price}_g2)}&quot;;
vars.put(&quot;productTitle&quot;, newTitle);


String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;/${__V(productSizes_1_g1)}/${__V(productSizes_2_g1)}/${__V(productSizes_3_g1)}/${__V(productSizes_4_g1)}/${__V(productSizes_5_g1)}/${__V(productSizes_6_g1)}/${__V(productSizes_7_g1)}/${__V(productSizes_8_g1)}/${__V(productSizes_9_g1)}/${__V(productSizes_10_g1)}/${__V(productColors_1_g1)}/${__V(productColors_2_g1)}/${__V(productColors_3_g1)}/${__V(productColors_4_g1)}/${__V(productColors_5_g1)}/${__V(productColors_6_g1)}/${__V(productColors_7_g1)}/${__V(productColors_8_g1)}/&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCategory</stringProp>
              <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultBrand</stringProp>
              <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCampaign</stringProp>
              <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultMagaza</stringProp>
              <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">4</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
              <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/cocukSubcategorySetter.bsh</stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_hm}&quot;&gt;&lt;![CDATA[${supplierId_hm}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www2.hm.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_cocukId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_cocukId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/products</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productId</stringProp>
                <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 13) as onuc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 14) as ondort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 15) as onbes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 16) as onalti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 17) as onyedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 18) as onsekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 19) as ondokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;/&apos;, 20) as yirmi))

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">productSizeIds</stringProp>
              <stringProp name="variableNames">productSizeIds</stringProp>
            </JDBCSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
              <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
              <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">lp2.hm.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/hmprod${new_picture}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">${__property(user.dir)}/images/hm/hm_${productId}_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <stringProp name="FileSaver.variablename">testimagefile</stringProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${testimagefile}</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype"></stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=3 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hm} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TRENDYOL-KADIN" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1481186702000</longProp>
        <longProp name="ThreadGroup.end_time">1481186702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,60)}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_trendyol} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BulkProductUpload.TY" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TY.KADIN" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.butik" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.trendyol.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/Butik/Liste/Kadin</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
                <stringProp name="RegexExtractor.regex">bigBoutiqueImage(.+?)=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/(.+?)&apos; title</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">bigBoutiqueImage lazy-load-trigger&quot; src=&quot;/Resources/images/bigBoutiquePlaceHolder.png&quot; data-original=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/200217/bambi_230217_new.jpg&apos;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
                <stringProp name="RegexExtractor.regex">bigBoutiqueImage(.+?)=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/(.+?)&apos; title=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$3$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
                <stringProp name="RegexExtractor.regex">boutiqueNavigationClick\(&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">boutiqueNavigationClick(&apos;158529&apos;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
              <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
              <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.endIndex">10</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.butikdetay.kadin" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.trendyol.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/Hotic---Yaz-Koleksiyonu/ButikDetay/${__V(boutiqueIds_${counter_boutique}_g1)}/Kadin</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;span class=&quot;subtitle&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles2" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles2</stringProp>
                  <stringProp name="RegexExtractor.regex">product-name&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;product-name&quot;&gt;Kırmızı Omuz ve Sırt Dekolteli Elbise&lt;/span&gt;</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">span class=&quot;subtitle&quot;(.+?)Kadın (.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                  <stringProp name="RegexExtractor.regex">=&apos;https://(.+?)//Assets/ProductImages/(.+?)&apos; </stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">clearfix product-detail-link&quot; href=&quot;(.+?)&quot; title</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOURL</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;clearfix product-detail-link</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                  <stringProp name="RegexExtractor.regex">span class=&quot;title&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                  <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                  <stringProp name="RegexExtractor.regex">saleprice&quot;&gt;(.+?) &lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">vol=&quot;(.+?)&quot; st</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                  <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.butikdetay.kadin" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.trendyol.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/catalog/boutique/detail?boutiqueFilter.boutiqueId=${__V(boutiqueIds_${counter_boutique}_g1)}&amp;boutiqueFilter.hideUnavailable=true&amp;genderTypeId=1&amp;loadBoutique=true&amp;pagination.itemCount=500&amp;pagination.pageIndex=1</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://api.trendyol.com/catalog//boutique/detail?boutiqueFilter.boutiqueId=160220&amp;boutiqueFilter.hideUnavailable=false&amp;genderTypeId=3&amp;loadBoutique=true&amp;pagination.itemCount=50&amp;pagination.pageIndex=1</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                  <stringProp name="RegexExtractor.regex">ProductId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;BoutiqueName</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">ProductId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;BoutiqueName</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">ProductCategory&quot;:\{&quot;Id&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">ProductCategory&quot;:\{&quot;Id&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                  <stringProp name="RegexExtractor.regex">ImageUrl&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">ProductId&quot;:(.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOURL</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;clearfix product-detail-link</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                  <stringProp name="RegexExtractor.regex">BrandName&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                  <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                  <stringProp name="RegexExtractor.regex">SalePrice&quot;:(.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">VariantId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productColors</stringProp>
                  <stringProp name="RegexExtractor.regex">Variants&quot;:\[\{&quot;VariantId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;Color&quot;:(.+?),&quot;Stock&quot;:\{&quot;StockStatus&quot;:(.+?),&quot;Availability&quot;:(.+?)},&quot;ColorName&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$6$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">Variants&quot;:\[\{&quot;VariantId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;Color&quot;:(.+?),&quot;Stock&quot;:\{&quot;StockStatus&quot;:(.+?),&quot;Availability&quot;:(.+?)},&quot;ColorName&quot;:&quot;(.+?)&quot;,</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                  <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;
int y = Integer.parseInt(x);

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;${__V(bigBoutiqueNames_${counter_boutique}_g3)}&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newCampaignId =&quot;&quot; + &quot;${__V(boutiqueIds_${counter_boutique}_g1)}&quot;;
vars.put(&quot;new_campaignId&quot;, newCampaignId);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
                <stringProp name="ForeachController.inputVal">productUrls</stringProp>
                <stringProp name="ForeachController.returnVal">productUrl</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
                <stringProp name="ForeachController.endIndex">10</stringProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_product&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);


String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String product_Title =&quot;&quot; + &quot;${__V(productTitles_${counter_price}_g2)}&quot;;
vars.put(&quot;productTitle&quot;, product_Title);

if(product_Title.contains (&quot;productTitles&quot;)) {

String product_Title =&quot;&quot;;
vars.put(&quot;productTitle&quot;, product_Title);
}

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Trendyol&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g2)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g2)}|${__V(productSizes_2_g2)}|${__V(productSizes_3_g2)}|${__V(productSizes_4_g2)}|${__V(productSizes_5_g2)}|${__V(productSizes_6_g2)}|${__V(productSizes_7_g2)}|&quot;;

String newColors =&quot;&quot; + &quot;${__V(productColors_${counter_price}_g6)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes+newColors);




/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as one),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as two),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as three),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as four),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 5) as five),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 6) as six),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 7) as seven),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 8) as eight),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 9) as nine),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 10) as ten),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCategory</stringProp>
                  <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultBrand</stringProp>
                  <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCampaign</stringProp>
                  <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultMagaza</stringProp>
                  <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">4</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                  <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_trendyol}&quot;&gt;&lt;![CDATA[${supplierId_trendyol}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.trendyol.com/kampanya/UrunDetay/${new_campaignId}/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/products</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">productId</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn))

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">productSizeIds</stringProp>
                  <stringProp name="variableNames">productSizeIds</stringProp>
                </JDBCSampler>
                <hashTree/>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                  <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                  <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">img-trendyol.mncdn.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${new_picture}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">data-original=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/158566/T00401FTY4002_3_org.jpg&apos;</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                    <stringProp name="FileSaver.filename">${__property(user.dir)}/images/trendyol/ty_${productId}_</stringProp>
                    <boolProp name="FileSaver.errorsonly">false</boolProp>
                    <boolProp name="FileSaver.skipautonumber">false</boolProp>
                    <boolProp name="FileSaver.skipsuffix">false</boolProp>
                    <boolProp name="FileSaver.successonly">true</boolProp>
                    <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                  </ResultSaver>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${testimagefile}</stringProp>
                        <stringProp name="File.paramname">image</stringProp>
                        <stringProp name="File.mimetype"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_trendyol} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TRENDYOL-ERKEK" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1490627103000</longProp>
        <longProp name="ThreadGroup.end_time">1490627103000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=2 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_trendyol} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TY.ERKEK" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.butik" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.trendyol.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/Butik/Liste/Erkek</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
              <stringProp name="RegexExtractor.regex">bigBoutiqueImage(.+?)=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/(.+?)&apos; title</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">/</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">bigBoutiqueImage lazy-load-trigger&quot; src=&quot;/Resources/images/bigBoutiquePlaceHolder.png&quot; data-original=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/200217/bambi_230217_new.jpg&apos;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
              <stringProp name="RegexExtractor.regex">bigBoutiqueImage(.+?)=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/(.+?)&apos; title=&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$3$</stringProp>
              <stringProp name="RegexExtractor.default">/</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
              <stringProp name="RegexExtractor.regex">boutiqueNavigationClick\(&apos;(.+?)&apos;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">/</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">boutiqueNavigationClick(&apos;158529&apos;</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
            <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
            <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
            <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="ForeachController.endIndex">10</stringProp>
          </ForeachController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.butikdetay.erkek" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.trendyol.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/Hotic---Yaz-Koleksiyonu/ButikDetay/${__V(boutiqueIds_${counter_boutique}_g1)}/Erkek</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span class=&quot;subtitle&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;product-name&quot;&gt;Erkek Gömlek&lt;/span&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">span class=&quot;product-name&quot;(.+?)Erkek (.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                <stringProp name="RegexExtractor.regex">=&apos;https://(.+?)//Assets/ProductImages/(.+?)&apos; </stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">clearfix product-detail-link&quot; href=&quot;(.+?)&quot; title</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot;clearfix product-detail-link</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">span class=&quot;title&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">saleprice&quot;&gt;(.+?) &lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">vol=&quot;(.+?)&quot; st</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.butikdetay.erkek" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.trendyol.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/catalog/boutique/detail?boutiqueFilter.boutiqueId=${__V(boutiqueIds_${counter_boutique}_g1)}&amp;boutiqueFilter.hideUnavailable=true&amp;genderTypeId=2&amp;loadBoutique=true&amp;pagination.itemCount=500&amp;pagination.pageIndex=1</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://api.trendyol.com/catalog//boutique/detail?boutiqueFilter.boutiqueId=160220&amp;boutiqueFilter.hideUnavailable=false&amp;genderTypeId=3&amp;loadBoutique=true&amp;pagination.itemCount=50&amp;pagination.pageIndex=1</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                <stringProp name="RegexExtractor.regex">ProductId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;BoutiqueName</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">ProductId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;BoutiqueName</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">ProductCategory&quot;:\{&quot;Id&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">ProductCategory&quot;:\{&quot;Id&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                <stringProp name="RegexExtractor.regex">ImageUrl&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">ProductId&quot;:(.+?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot;clearfix product-detail-link</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">BrandName&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">SalePrice&quot;:(.+?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">VariantId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productColors</stringProp>
                <stringProp name="RegexExtractor.regex">Variants&quot;:\[\{&quot;VariantId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;Color&quot;:(.+?),&quot;Stock&quot;:\{&quot;StockStatus&quot;:(.+?),&quot;Availability&quot;:(.+?)},&quot;ColorName&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$6$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">Variants&quot;:\[\{&quot;VariantId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;Color&quot;:(.+?),&quot;Stock&quot;:\{&quot;StockStatus&quot;:(.+?),&quot;Availability&quot;:(.+?)},&quot;ColorName&quot;:&quot;(.+?)&quot;,</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;
int y = Integer.parseInt(x);

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;${__V(bigBoutiqueNames_${counter_boutique}_g3)}&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newCampaignId =&quot;&quot; + &quot;${__V(boutiqueIds_${counter_boutique}_g1)}&quot;;
vars.put(&quot;new_campaignId&quot;, newCampaignId);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productTitles</stringProp>
              <stringProp name="ForeachController.returnVal">productTitle</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.endIndex">10</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_product&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);


String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String product_Title =&quot;&quot; + &quot;${__V(productTitles_${counter_price}_g2)}&quot;;
vars.put(&quot;productTitle&quot;, product_Title);

if(product_Title.contains (&quot;productTitles&quot;)) {

String product_Title =&quot;&quot;;
vars.put(&quot;productTitle&quot;, product_Title);
}

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Trendyol&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g2)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g2)}|${__V(productSizes_2_g2)}|${__V(productSizes_3_g2)}|${__V(productSizes_4_g2)}|${__V(productSizes_5_g2)}|${__V(productSizes_6_g2)}|${__V(productSizes_7_g2)}|&quot;;

String newColors =&quot;&quot; + &quot;${__V(productColors_${counter_price}_g6)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes+newColors);




/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as one),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as two),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as three),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as four),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 5) as five),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 6) as six),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 7) as seven),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 8) as eight),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 9) as nine),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 10) as ten),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/erkekSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_trendyol}&quot;&gt;&lt;![CDATA[${supplierId_trendyol}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.trendyol.com/kampanya/UrunDetay/${new_campaignId}/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_erkekId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_erkekId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">img-trendyol.mncdn.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">data-original=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/158566/T00401FTY4002_3_org.jpg&apos;</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/trendyol/ty_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=2 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_trendyol} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TRENDYOL-COCUK" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1490633285000</longProp>
        <longProp name="ThreadGroup.end_time">1490633285000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=3 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_trendyol} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TY.COCUK" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.butik" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.trendyol.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/Butik/Liste/cocuk</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
              <stringProp name="RegexExtractor.regex">bigBoutiqueImage(.+?)=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/(.+?)&apos; title</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">/</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">bigBoutiqueImage lazy-load-trigger&quot; src=&quot;/Resources/images/bigBoutiquePlaceHolder.png&quot; data-original=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/200217/bambi_230217_new.jpg&apos;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
              <stringProp name="RegexExtractor.regex">bigBoutiqueImage(.+?)=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/(.+?)&apos; title=&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$3$</stringProp>
              <stringProp name="RegexExtractor.default">/</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
              <stringProp name="RegexExtractor.regex">boutiqueNavigationClick\(&apos;(.+?)&apos;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">/</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">boutiqueNavigationClick(&apos;158529&apos;</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
            <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
            <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
            <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="ForeachController.endIndex">10</stringProp>
          </ForeachController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.butikdetay" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.trendyol.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/Hotic---Yaz-Koleksiyonu/ButikDetay/${__V(boutiqueIds_${counter_boutique}_g1)}/cocuk</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span class=&quot;subtitle&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">span class=&quot;subtitle&quot;&gt;(.+?)&lt;/span</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                <stringProp name="RegexExtractor.regex">=&apos;https://(.+?)//Assets/ProductImages/(.+?)&apos; </stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">clearfix product-detail-link&quot; href=&quot;(.+?)&quot; title</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot;clearfix product-detail-link</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">span class=&quot;title&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">saleprice&quot;&gt;(.+?) &lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">vol=&quot;(.+?)&quot; st</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.butikdetay.cocuk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.trendyol.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/catalog/boutique/detail?boutiqueFilter.boutiqueId=${__V(boutiqueIds_${counter_boutique}_g1)}&amp;boutiqueFilter.hideUnavailable=true&amp;genderTypeId=3&amp;loadBoutique=true&amp;pagination.itemCount=500&amp;pagination.pageIndex=1</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://api.trendyol.com/catalog//boutique/detail?boutiqueFilter.boutiqueId=160220&amp;boutiqueFilter.hideUnavailable=false&amp;genderTypeId=3&amp;loadBoutique=true&amp;pagination.itemCount=50&amp;pagination.pageIndex=1</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                <stringProp name="RegexExtractor.regex">ProductId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;BoutiqueName</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">ProductId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;BoutiqueName</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">ProductCategory&quot;:\{&quot;Id&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">ProductCategory&quot;:\{&quot;Id&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                <stringProp name="RegexExtractor.regex">ImageUrl&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">ProductId&quot;:(.+?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot;clearfix product-detail-link</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">BrandName&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">SalePrice&quot;:(.+?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">VariantId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productColors</stringProp>
                <stringProp name="RegexExtractor.regex">Variants&quot;:\[\{&quot;VariantId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;Color&quot;:(.+?),&quot;Stock&quot;:\{&quot;StockStatus&quot;:(.+?),&quot;Availability&quot;:(.+?)},&quot;ColorName&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$6$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">Variants&quot;:\[\{&quot;VariantId&quot;:(.+?),&quot;Name&quot;:&quot;(.+?)&quot;,&quot;Color&quot;:(.+?),&quot;Stock&quot;:\{&quot;StockStatus&quot;:(.+?),&quot;Availability&quot;:(.+?)},&quot;ColorName&quot;:&quot;(.+?)&quot;,</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;
int y = Integer.parseInt(x);

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;${__V(bigBoutiqueNames_${counter_boutique}_g3)}&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newCampaignId =&quot;&quot; + &quot;${__V(boutiqueIds_${counter_boutique}_g1)}&quot;;
vars.put(&quot;new_campaignId&quot;, newCampaignId);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productTitles</stringProp>
              <stringProp name="ForeachController.returnVal">productTitle</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.endIndex">10</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_product&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);


String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String product_Title =&quot;&quot; + &quot;${__V(productTitles_${counter_price}_g2)}&quot;;
vars.put(&quot;productTitle&quot;, product_Title);

if(product_Title.contains (&quot;productTitles&quot;)) {

String product_Title =&quot;&quot;;
vars.put(&quot;productTitle&quot;, product_Title);
}

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Trendyol&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g2)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g2)}|${__V(productSizes_2_g2)}|${__V(productSizes_3_g2)}|${__V(productSizes_4_g2)}|${__V(productSizes_5_g2)}|${__V(productSizes_6_g2)}|${__V(productSizes_7_g2)}|&quot;;

String newColors =&quot;&quot; + &quot;${__V(productColors_${counter_price}_g6)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes+newColors);




/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as one),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as two),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as three),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as four),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 5) as five),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 6) as six),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 7) as seven),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 8) as eight),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 9) as nine),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 10) as ten),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/cocukSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_trendyol}&quot;&gt;&lt;![CDATA[${supplierId_trendyol}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.trendyol.com/kampanya/UrunDetay/${new_campaignId}/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_cocukId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_cocukId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">img-trendyol.mncdn.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">data-original=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/158566/T00401FTY4002_3_org.jpg&apos;</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/trendyol/ty_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=3 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_trendyol} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MARKAFONI-KADIN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1481186702000</longProp>
        <longProp name="ThreadGroup.end_time">1481186702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,60)}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_markafoni} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BulkProductUpload.MAR" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MAR.KADIN" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.butik.kadin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.markafoni.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/kampanya/kadin-7326</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/kadin-7326</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
                <stringProp name="RegexExtractor.regex">width-full item campaign&quot; data-name=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
                <stringProp name="RegexExtractor.regex">img-container&quot;&gt;\s+&lt;a href=&quot;http://www.markafoni.com/kampanya/(.+?)/&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot;img-container&quot;&gt;
					&lt;a href=&quot;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
              <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
              <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.butikdetay.kadin" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.markafoni.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/kampanya/${__V(boutiqueIds_${counter_boutique}_g1)}/?prefn1=gender&amp;prefv1=FEMALE</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;name&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;https://sits-pod48.demandware.net/(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">class=&quot;ee-product&quot; href=&quot;/(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOURL</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;brand&apos;:&apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                  <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                  <stringProp name="RegexExtractor.regex">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">Filtrele Beden: (.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prefn1=gender&amp;amp;prefn2=size&amp;amp;prefv1=FEMALE&amp;amp;prefv2=L&quot; title=&quot;Filtrele Beden: L&quot;&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                  <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;
int y = Integer.parseInt(x);

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);

String newCampaignName =&quot;&quot; + &quot;${__V(bigBoutiqueNames_${counter_boutique}_g1)}&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
                <stringProp name="ForeachController.inputVal">productTitles</stringProp>
                <stringProp name="ForeachController.returnVal">productTitle</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.urundetay" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">www.markafoni.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;name&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;https://sits-pod48.demandware.net/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;ee-product&quot; href=&quot;/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOURL</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;brand&apos;:&apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                    <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                    <stringProp name="RegexExtractor.regex">title=&quot;(.+?)&quot; data-lgimg</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">title=&quot;Pembe&quot; data-lgimg</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                    <stringProp name="RegexExtractor.regex">\}&apos;&gt;\s+(.+?)\s+&lt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">title=&quot;Pembe&quot; data-lgimg</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                    <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_product&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);



String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newManufacturer =&quot;&quot; + &quot;Markafoni&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newProductMeta =&quot;&quot; + &quot;${__V(productMetas_${counter_price}_g1)}&quot;;
vars.put(&quot;new_productMeta&quot;, newProductMeta);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}

String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g1)}|${__V(productSizes_2_g1)}|${__V(productSizes_3_g1)}|${__V(productSizes_4_g1)}|${__V(productSizes_5_g1)}|${__V(productSizes_6_g1)}|${__V(productSizes_7_g1)}|${__V(productSizes_8_g1)}|${__V(productSizes_9_g1)}|${__V(productSizes_10_g1)}|${__V(productSizes_11_g1)}|${__V(productSizes_12_g1)}|{__V(productSizes_13_g1)}|{__V(productSizes_14_g1)}|{__V(productSizes_15_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);


/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as one),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as two),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as three),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as four),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 5) as five),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 6) as six),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 7) as seven),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 8) as eight),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 9) as nine),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 10) as ten),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCategory</stringProp>
                  <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultBrand</stringProp>
                  <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCampaign</stringProp>
                  <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultMagaza</stringProp>
                  <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">4</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_markafoni}&quot;&gt;&lt;![CDATA[${supplierId_markafoni}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.markafoni.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/products</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">productId</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 13) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 14) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 15) as oniki))

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">productSizeIds</stringProp>
                  <stringProp name="variableNames">productSizeIds</stringProp>
                </JDBCSampler>
                <hashTree/>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                  <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                  <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.pictureURL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">sits-pod48.demandware.net</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">https://sits-pod48.demandware.net</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                    <stringProp name="FileSaver.filename">${__property(user.dir)}/images/markafoni/mar_${productId}_</stringProp>
                    <boolProp name="FileSaver.errorsonly">false</boolProp>
                    <boolProp name="FileSaver.skipautonumber">false</boolProp>
                    <boolProp name="FileSaver.skipsuffix">false</boolProp>
                    <boolProp name="FileSaver.successonly">true</boolProp>
                    <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                  </ResultSaver>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${testimagefile}</stringProp>
                        <stringProp name="File.paramname">image</stringProp>
                        <stringProp name="File.mimetype"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_markafoni} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MARKAFONI-ERKEK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1481186702000</longProp>
        <longProp name="ThreadGroup.end_time">1481186702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,60)}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=2 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_markafoni} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BulkProductUpload.MAR" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MAR.ERKEK" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.butik.erkek" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.markafoni.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/kampanya/erkek-7327</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">http://www.markafoni.com//kampanya/erkek-7327</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
                <stringProp name="RegexExtractor.regex">width-full item campaign&quot; data-name=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
                <stringProp name="RegexExtractor.regex">img-container&quot;&gt;\s+&lt;a href=&quot;http://www.markafoni.com/kampanya/(.+?)/&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot;img-container&quot;&gt;
					&lt;a href=&quot;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
              <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
              <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.butikdetay.erkek" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.markafoni.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/kampanya/${__V(boutiqueIds_${counter_boutique}_g1)}/?prefn1=gender&amp;prefv1=MALE</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;name&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;https://sits-pod48.demandware.net/(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">class=&quot;ee-product&quot; href=&quot;/(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOURL</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;brand&apos;:&apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                  <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                  <stringProp name="RegexExtractor.regex">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                  <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;
int y = Integer.parseInt(x);

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);

String newCampaignName =&quot;&quot; + &quot;${__V(bigBoutiqueNames_${counter_boutique}_g1)}&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
                <stringProp name="ForeachController.inputVal">productTitles</stringProp>
                <stringProp name="ForeachController.returnVal">productTitle</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.urundetay" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">www.markafoni.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;name&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;https://sits-pod48.demandware.net/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;ee-product&quot; href=&quot;/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOURL</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;brand&apos;:&apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                    <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                    <stringProp name="RegexExtractor.regex">title=&quot;(.+?)&quot; data-lgimg</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">jpg&quot;}&apos;&gt;

40

&lt;/a&gt;</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                    <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_product&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newManufacturer =&quot;&quot; + &quot;Markafoni&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newProductMeta =&quot;&quot; + &quot;${__V(productMetas_${counter_price}_g1)}&quot;;
vars.put(&quot;new_productMeta&quot;, newProductMeta);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g1)}|${__V(productSizes_2_g1)}|${__V(productSizes_3_g1)}|${__V(productSizes_4_g1)}|${__V(productSizes_5_g1)}|${__V(productSizes_6_g1)}|${__V(productSizes_7_g1)}|${__V(productSizes_8_g1)}|${__V(productSizes_9_g1)}|${__V(productSizes_10_g1)}|${__V(productSizes_11_g1)}|${__V(productSizes_12_g1)}|{__V(productSizes_13_g1)}|{__V(productSizes_14_g1)}|{__V(productSizes_15_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);


/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as one),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as two),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as three),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as four),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 5) as five),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 6) as six),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 7) as seven),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 8) as eight),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 9) as nine),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 10) as ten),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCategory</stringProp>
                  <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultBrand</stringProp>
                  <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCampaign</stringProp>
                  <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultMagaza</stringProp>
                  <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">4</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                  <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/erkekSubcategorySetter.bsh</stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_markafoni}&quot;&gt;&lt;![CDATA[${supplierId_markafoni}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.markafoni.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_erkekId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_erkekId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/products</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">productId</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 13) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 14) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 15) as oniki))

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">productSizeIds</stringProp>
                  <stringProp name="variableNames">productSizeIds</stringProp>
                </JDBCSampler>
                <hashTree/>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                  <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                  <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.pictureURL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">sits-pod48.demandware.net</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">https://sits-pod48.demandware.net</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                    <stringProp name="FileSaver.filename">${__property(user.dir)}/images/markafoni/mar_${productId}_</stringProp>
                    <boolProp name="FileSaver.errorsonly">false</boolProp>
                    <boolProp name="FileSaver.skipautonumber">false</boolProp>
                    <boolProp name="FileSaver.skipsuffix">false</boolProp>
                    <boolProp name="FileSaver.successonly">true</boolProp>
                    <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                  </ResultSaver>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${testimagefile}</stringProp>
                        <stringProp name="File.paramname">image</stringProp>
                        <stringProp name="File.mimetype"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=2 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_markafoni} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MARKAFONI-COCUK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1481186702000</longProp>
        <longProp name="ThreadGroup.end_time">1481186702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,60)}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=3 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_markafoni} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BulkProductUpload.MAR" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MAR.COCUK" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.butik.cocuk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.markafoni.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/kampanya/bebek-cocuk-7328</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">http://www.markafoni.com//kampanya/erkek-7327</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
                <stringProp name="RegexExtractor.regex">width-full item campaign&quot; data-name=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
                <stringProp name="RegexExtractor.regex">img-container&quot;&gt;\s+&lt;a href=&quot;http://www.markafoni.com/kampanya/(.+?)/&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot;img-container&quot;&gt;
					&lt;a href=&quot;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
              <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
              <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.butikdetay.cocuk" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.markafoni.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/kampanya/${__V(boutiqueIds_${counter_boutique}_g1)}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;name&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;https://sits-pod48.demandware.net/(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">class=&quot;ee-product&quot; href=&quot;/(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOURL</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;brand&apos;:&apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                  <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                  <stringProp name="RegexExtractor.regex">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                  <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;
int y = Integer.parseInt(x);

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);

String newCampaignName =&quot;&quot; + &quot;${__V(bigBoutiqueNames_${counter_boutique}_g1)}&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
                <stringProp name="ForeachController.inputVal">productTitles</stringProp>
                <stringProp name="ForeachController.returnVal">productTitle</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.urundetay" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">www.markafoni.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;name&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;https://sits-pod48.demandware.net/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;ee-product&quot; href=&quot;/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOURL</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;brand&apos;:&apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                    <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                    <stringProp name="RegexExtractor.regex">title=&quot;(.+?)&quot; data-lgimg</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">jpg&quot;}&apos;&gt;

40

&lt;/a&gt;</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                    <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_product&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newManufacturer =&quot;&quot; + &quot;Markafoni&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newProductMeta =&quot;&quot; + &quot;${__V(productMetas_${counter_price}_g1)}&quot;;
vars.put(&quot;new_productMeta&quot;, newProductMeta);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g1)}|${__V(productSizes_2_g1)}|${__V(productSizes_3_g1)}|${__V(productSizes_4_g1)}|${__V(productSizes_5_g1)}|${__V(productSizes_6_g1)}|${__V(productSizes_7_g1)}|${__V(productSizes_8_g1)}|${__V(productSizes_9_g1)}|${__V(productSizes_10_g1)}|${__V(productSizes_11_g1)}|${__V(productSizes_12_g1)}|{__V(productSizes_13_g1)}|{__V(productSizes_14_g1)}|{__V(productSizes_15_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);


/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as one),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as two),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as three),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as four),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 5) as five),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 6) as six),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 7) as seven),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 8) as eight),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 9) as nine),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 10) as ten),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCategory</stringProp>
                  <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultBrand</stringProp>
                  <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCampaign</stringProp>
                  <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultMagaza</stringProp>
                  <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">4</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                  <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/cocukSubcategorySetter.bsh</stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_markafoni}&quot;&gt;&lt;![CDATA[${supplierId_markafoni}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.markafoni.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_cocukId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_cocukId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/products</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">productId</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 13) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 14) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 15) as oniki))

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">productSizeIds</stringProp>
                  <stringProp name="variableNames">productSizeIds</stringProp>
                </JDBCSampler>
                <hashTree/>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                  <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                  <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.pictureURL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">sits-pod48.demandware.net</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">https://sits-pod48.demandware.net</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                    <stringProp name="FileSaver.filename">${__property(user.dir)}/images/markafoni/mar_${productId}_</stringProp>
                    <boolProp name="FileSaver.errorsonly">false</boolProp>
                    <boolProp name="FileSaver.skipautonumber">false</boolProp>
                    <boolProp name="FileSaver.skipsuffix">false</boolProp>
                    <boolProp name="FileSaver.successonly">true</boolProp>
                    <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                  </ResultSaver>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${testimagefile}</stringProp>
                        <stringProp name="File.paramname">image</stringProp>
                        <stringProp name="File.mimetype"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=3 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_markafoni} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MORHIPO-KADIN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1481186702000</longProp>
        <longProp name="ThreadGroup.end_time">1481186702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,60)}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_morhipo} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BulkProductUpload.MOR" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MOR.KADIN" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.butik.kadin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/kampanya/alisveris/1</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/kadin-7326</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
                <stringProp name="RegexExtractor.regex">img src=&apos;/Content/imagesResp/spacer-ps-lg.png&apos; data-src=&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
                <stringProp name="RegexExtractor.regex">&apos; class=&apos;lazyload&apos; alt=&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; href=&quot;/kampanya/liste/(.+?)&quot; target=&quot;_parent&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot; href=&quot;/kampanya/liste/54855/dunyaca-unlu-gozluk-markalari&quot; target=&quot;_parent&quot;
</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
              <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
              <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.butikdetay.kadin" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/kampanya/liste/${__V(boutiqueIds_${counter_boutique}_g1)}/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="morCampaignId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                  <stringProp name="RegexExtractor.refname">morCampaignId</stringProp>
                  <stringProp name="RegexExtractor.regex">/kampanya/liste/(.+?)/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.FindProductsByFilter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;PageSize&quot;:24,&quot;PageNo&quot;:0,&quot;ShowOnlyInStock&quot;:false,&quot;SearchExpression&quot;:&quot;&quot;,&quot;ApplyDefaultFiltersForSearchKeywords&quot;:true,&quot;FredhopperQuery&quot;:&quot;&quot;,&quot;DepartmentID&quot;:0,&quot;MicroCategoryDepartmentId&quot;:0,&quot;CampaignID&quot;:${morCampaignId},&quot;Token&quot;:&quot;tokenKey&quot;,&quot;FilterContextItems&quot;:null,&quot;ExcludedCampaigns&quot;:[],&quot;BrandID&quot;:&quot;&quot;,&quot;ShowAllPages&quot;:true,&quot;InStockOnly&quot;:false,&quot;FilterContextItemsList&quot;:[{&quot;Key&quot;:&quot;fstdlvry&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;fstdlvry&quot;,&quot;FilterProperty&quot;:&quot;fstdlvry&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;Comparison&quot;}},{&quot;Key&quot;:&quot;1057&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1057&quot;,&quot;FilterProperty&quot;:&quot;1057&quot;,&quot;Values&quot;:[{&quot;Value&quot;:&quot;1057&quot;,&quot;ValueID&quot;:&quot;31885&quot;}],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1059&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1059&quot;,&quot;FilterProperty&quot;:&quot;1059&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1064&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1064&quot;,&quot;FilterProperty&quot;:&quot;1064&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1060&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1060&quot;,&quot;FilterProperty&quot;:&quot;1060&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1056&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1056&quot;,&quot;FilterProperty&quot;:&quot;1056&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;yaka&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;yaka&quot;,&quot;FilterProperty&quot;:&quot;yaka&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;fit&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;fit&quot;,&quot;FilterProperty&quot;:&quot;fit&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;tarz&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;tarz&quot;,&quot;FilterProperty&quot;:&quot;tarz&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;desen&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;desen&quot;,&quot;FilterProperty&quot;:&quot;desen&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;kol&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;kol&quot;,&quot;FilterProperty&quot;:&quot;kol&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;bel&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;bel&quot;,&quot;FilterProperty&quot;:&quot;bel&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;boy&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;boy&quot;,&quot;FilterProperty&quot;:&quot;boy&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;sort&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;sort&quot;,&quot;FilterProperty&quot;:&quot;sort&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;DropDown&quot;}},{&quot;Key&quot;:&quot;price&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;price&quot;,&quot;FilterProperty&quot;:&quot;price&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;RangeSlider&quot;}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/Product/FindProductsByFilter</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://www.morhipo.com/kampanya/liste/54747/gunun-surprizi</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                  <stringProp name="RegexExtractor.regex">ModelName&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;Brand&quot;:&quot;Toga Pulla&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">ModelName&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                  <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                  <stringProp name="RegexExtractor.regex">PicturePath&quot;:&quot;https://img-morhipo.mncdn.com/productimages/(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;PicturePath&quot;:&quot;https://img-morhipo.mncdn.com/productimages/8699486075262/[img][4][1][313x429].jpg?0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">ProductPath&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOURL</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                  <stringProp name="RegexExtractor.regex">Brand&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;Brand&quot;:&quot;Toga Pulla&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                  <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                  <stringProp name="RegexExtractor.regex">DiscountPriceFormatted&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                  <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;
int y = Integer.parseInt(x);

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);

String newCampaignName =&quot;&quot; + &quot;${__V(bigBoutiqueNames_${counter_boutique}_g1)}&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
                <stringProp name="ForeachController.inputVal">productTitles</stringProp>
                <stringProp name="ForeachController.returnVal">productTitle</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.urundetay" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;name&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;https://sits-pod48.demandware.net/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;ee-product&quot; href=&quot;/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOURL</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;brand&apos;:&apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                    <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                    <stringProp name="RegexExtractor.regex">\{&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">jpg&quot;}&apos;&gt;

40

&lt;/a&gt;</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                    <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_product&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newManufacturer =&quot;&quot; + &quot;Morhipo&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newProductMeta =&quot;&quot; + &quot;${__V(productMetas_${counter_price}_g1)}&quot;;
vars.put(&quot;new_productMeta&quot;, newProductMeta);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g1)}|${__V(productSizes_2_g1)}|${__V(productSizes_3_g1)}|${__V(productSizes_4_g1)}|${__V(productSizes_5_g1)}|${__V(productSizes_6_g1)}|${__V(productSizes_7_g1)}|${__V(productSizes_8_g1)}|${__V(productSizes_9_g1)}|${__V(productSizes_10_g1)}|${__V(productSizes_11_g1)}|${__V(productSizes_12_g1)}|{__V(productSizes_13_g1)}|{__V(productSizes_14_g1)}|{__V(productSizes_15_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as one),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as two),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as three),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as four),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 5) as five),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 6) as six),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 7) as seven),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 8) as eight),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 9) as nine),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 10) as ten),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCategory</stringProp>
                  <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang 
WHERE id_lang =2 AND value = &quot;${new_brand}&quot; 
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =9
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultBrand</stringProp>
                  <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =10
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCampaign</stringProp>
                  <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultMagaza</stringProp>
                  <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/9&quot;&gt;&lt;![CDATA[9]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">4</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/10&quot;&gt;&lt;![CDATA[10]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
                  <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_morhipo}&quot;&gt;&lt;![CDATA[${supplierId_morhipo}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.morhipo.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/products</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">productId</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 13) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 14) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 15) as oniki))

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">productSizeIds</stringProp>
                  <stringProp name="variableNames">productSizeIds</stringProp>
                </JDBCSampler>
                <hashTree/>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                  <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                  <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.pictureURL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">img-morhipo.mncdn.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/productimages/${new_picture}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">${new_picture}https://img-morhipo.mncdn.com/productimages/i/5343416/[img][4][1].jpg?1126
	at java.net.URI$Parser.fail(URI.java:2848)</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                    <stringProp name="FileSaver.filename">${__property(user.dir)}/images/morhipo/mor_${productId}_</stringProp>
                    <boolProp name="FileSaver.errorsonly">false</boolProp>
                    <boolProp name="FileSaver.skipautonumber">false</boolProp>
                    <boolProp name="FileSaver.skipsuffix">false</boolProp>
                    <boolProp name="FileSaver.successonly">true</boolProp>
                    <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                  </ResultSaver>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${testimagefile}</stringProp>
                        <stringProp name="File.paramname">image</stringProp>
                        <stringProp name="File.mimetype"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_morhipo} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MORHIPO-ERKEK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1481186702000</longProp>
        <longProp name="ThreadGroup.end_time">1481186702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,60)}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=2 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_morhipo} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BulkProductUpload.MOR" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MOR.ERKEK" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.butik.erkek" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/kampanya/alisveris/2</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/kadin-7326</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
                <stringProp name="RegexExtractor.regex">img src=&apos;/Content/imagesResp/spacer-ps-lg.png&apos; data-src=&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
                <stringProp name="RegexExtractor.regex">&apos; class=&apos;lazyload&apos; alt=&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; href=&quot;/kampanya/liste/(.+?)&quot; target=&quot;_parent&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot; href=&quot;/kampanya/liste/54855/dunyaca-unlu-gozluk-markalari&quot; target=&quot;_parent&quot;
</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
              <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
              <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.butikdetay.erkek" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/kampanya/liste/${__V(boutiqueIds_${counter_boutique}_g1)}/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="morCampaignId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                  <stringProp name="RegexExtractor.refname">morCampaignId</stringProp>
                  <stringProp name="RegexExtractor.regex">/kampanya/liste/(.+?)/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.FindProductsByFilter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;PageSize&quot;:24,&quot;PageNo&quot;:0,&quot;ShowOnlyInStock&quot;:false,&quot;SearchExpression&quot;:&quot;&quot;,&quot;ApplyDefaultFiltersForSearchKeywords&quot;:true,&quot;FredhopperQuery&quot;:&quot;&quot;,&quot;DepartmentID&quot;:0,&quot;MicroCategoryDepartmentId&quot;:0,&quot;CampaignID&quot;:${morCampaignId},&quot;Token&quot;:&quot;tokenKey&quot;,&quot;FilterContextItems&quot;:null,&quot;ExcludedCampaigns&quot;:[],&quot;BrandID&quot;:&quot;&quot;,&quot;ShowAllPages&quot;:true,&quot;InStockOnly&quot;:false,&quot;FilterContextItemsList&quot;:[{&quot;Key&quot;:&quot;fstdlvry&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;fstdlvry&quot;,&quot;FilterProperty&quot;:&quot;fstdlvry&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;Comparison&quot;}},{&quot;Key&quot;:&quot;1057&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1057&quot;,&quot;FilterProperty&quot;:&quot;1057&quot;,&quot;Values&quot;:[{&quot;Value&quot;:&quot;1057&quot;,&quot;ValueID&quot;:&quot;32418&quot;}],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1064&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1064&quot;,&quot;FilterProperty&quot;:&quot;1064&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1060&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1060&quot;,&quot;FilterProperty&quot;:&quot;1060&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1056&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1056&quot;,&quot;FilterProperty&quot;:&quot;1056&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;yaka&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;yaka&quot;,&quot;FilterProperty&quot;:&quot;yaka&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;fit&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;fit&quot;,&quot;FilterProperty&quot;:&quot;fit&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;desen&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;desen&quot;,&quot;FilterProperty&quot;:&quot;desen&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;kol&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;kol&quot;,&quot;FilterProperty&quot;:&quot;kol&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;bel&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;bel&quot;,&quot;FilterProperty&quot;:&quot;bel&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;boy&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;boy&quot;,&quot;FilterProperty&quot;:&quot;boy&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;sort&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;sort&quot;,&quot;FilterProperty&quot;:&quot;sort&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;DropDown&quot;}},{&quot;Key&quot;:&quot;price&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;price&quot;,&quot;FilterProperty&quot;:&quot;price&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;RangeSlider&quot;}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/Product/FindProductsByFilter</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://www.morhipo.com/kampanya/liste/54747/gunun-surprizi</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                  <stringProp name="RegexExtractor.regex">ModelName&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;Brand&quot;:&quot;Toga Pulla&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">ModelName&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                  <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                  <stringProp name="RegexExtractor.regex">PicturePath&quot;:&quot;https://img-morhipo.mncdn.com/productimages/(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;PicturePath&quot;:&quot;https://img-morhipo.mncdn.com/productimages/8699486075262/[img][4][1][313x429].jpg?0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">ProductPath&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOURL</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                  <stringProp name="RegexExtractor.regex">Brand&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;Brand&quot;:&quot;Toga Pulla&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                  <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                  <stringProp name="RegexExtractor.regex">DiscountPriceFormatted&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                  <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;
int y = Integer.parseInt(x);

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);

String newCampaignName =&quot;&quot; + &quot;${__V(bigBoutiqueNames_${counter_boutique}_g1)}&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
                <stringProp name="ForeachController.inputVal">productTitles</stringProp>
                <stringProp name="ForeachController.returnVal">productTitle</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.urundetay" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;name&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;https://sits-pod48.demandware.net/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;ee-product&quot; href=&quot;/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOURL</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;brand&apos;:&apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                    <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                    <stringProp name="RegexExtractor.regex">\{&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">jpg&quot;}&apos;&gt;

40

&lt;/a&gt;</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                    <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_product&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newManufacturer =&quot;&quot; + &quot;Morhipo&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newProductMeta =&quot;&quot; + &quot;${__V(productMetas_${counter_price}_g1)}&quot;;
vars.put(&quot;new_productMeta&quot;, newProductMeta);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}

String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g1)}|${__V(productSizes_2_g1)}|${__V(productSizes_3_g1)}|${__V(productSizes_4_g1)}|${__V(productSizes_5_g1)}|${__V(productSizes_6_g1)}|${__V(productSizes_7_g1)}|${__V(productSizes_8_g1)}|${__V(productSizes_9_g1)}|${__V(productSizes_10_g1)}|${__V(productSizes_11_g1)}|${__V(productSizes_12_g1)}|{__V(productSizes_13_g1)}|{__V(productSizes_14_g1)}|{__V(productSizes_15_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as one),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as two),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as three),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as four),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 5) as five),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 6) as six),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 7) as seven),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 8) as eight),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 9) as nine),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 10) as ten),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCategory</stringProp>
                  <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang 
WHERE id_lang =2 AND value = &quot;${new_brand}&quot; 
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =9
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultBrand</stringProp>
                  <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =10
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCampaign</stringProp>
                  <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultMagaza</stringProp>
                  <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/9&quot;&gt;&lt;![CDATA[9]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">4</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/10&quot;&gt;&lt;![CDATA[10]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/erkekSubcategorySetter.bsh</stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_morhipo}&quot;&gt;&lt;![CDATA[${supplierId_morhipo}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.morhipo.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_erkekId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_erkekId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/products</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">productId</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 13) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 14) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 15) as oniki))

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">productSizeIds</stringProp>
                  <stringProp name="variableNames">productSizeIds</stringProp>
                </JDBCSampler>
                <hashTree/>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                  <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                  <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.pictureURL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">img-morhipo.mncdn.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/productimages/${new_picture}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">${new_picture}https://img-morhipo.mncdn.com/productimages/i/5343416/[img][4][1].jpg?1126
	at java.net.URI$Parser.fail(URI.java:2848)</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                    <stringProp name="FileSaver.filename">${__property(user.dir)}/images/morhipo/mor_${productId}_</stringProp>
                    <boolProp name="FileSaver.errorsonly">false</boolProp>
                    <boolProp name="FileSaver.skipautonumber">false</boolProp>
                    <boolProp name="FileSaver.skipsuffix">false</boolProp>
                    <boolProp name="FileSaver.successonly">true</boolProp>
                    <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                  </ResultSaver>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${testimagefile}</stringProp>
                        <stringProp name="File.paramname">image</stringProp>
                        <stringProp name="File.mimetype"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=2 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_morhipo} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MORHIPO-COCUK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1481186702000</longProp>
        <longProp name="ThreadGroup.end_time">1481186702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,60)}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=3 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_morhipo} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BulkProductUpload.MOR" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MOR.COCUK" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.butik.cocuk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/kampanya/alisveris/3</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/kadin-7326</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
                <stringProp name="RegexExtractor.regex">img src=&apos;/Content/imagesResp/spacer-ps-lg.png&apos; data-src=&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
                <stringProp name="RegexExtractor.regex">&apos; class=&apos;lazyload&apos; alt=&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; href=&quot;/kampanya/liste/(.+?)&quot; target=&quot;_parent&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot; href=&quot;/kampanya/liste/54855/dunyaca-unlu-gozluk-markalari&quot; target=&quot;_parent&quot;
</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
              <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
              <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.butikdetay.cocuk" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/kampanya/liste/${__V(boutiqueIds_${counter_boutique}_g1)}/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="morCampaignId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                  <stringProp name="RegexExtractor.refname">morCampaignId</stringProp>
                  <stringProp name="RegexExtractor.regex">/kampanya/liste/(.+?)/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.FindProductsByFilter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;PageSize&quot;:&quot;24&quot;,&quot;PageNo&quot;:0,&quot;ShowOnlyInStock&quot;:false,&quot;SearchExpression&quot;:&quot;&quot;,&quot;ApplyDefaultFiltersForSearchKeywords&quot;:true,&quot;FredhopperQuery&quot;:&quot;&quot;,&quot;DepartmentID&quot;:0,&quot;MicroCategoryDepartmentId&quot;:0,&quot;CampaignID&quot;:${morCampaignId},&quot;Token&quot;:&quot;tokenKey&quot;,&quot;FilterContextItems&quot;:null,&quot;ExcludedCampaigns&quot;:[],&quot;BrandID&quot;:&quot;&quot;,&quot;ShowAllPages&quot;:true,&quot;InStockOnly&quot;:false,&quot;FilterContextItemsList&quot;:[{&quot;Key&quot;:&quot;fstdlvry&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;fstdlvry&quot;,&quot;FilterProperty&quot;:&quot;fstdlvry&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;Comparison&quot;}},{&quot;Key&quot;:&quot;1057&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1057&quot;,&quot;FilterProperty&quot;:&quot;1057&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1059&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1059&quot;,&quot;FilterProperty&quot;:&quot;1059&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1064&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1064&quot;,&quot;FilterProperty&quot;:&quot;1064&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1060&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1060&quot;,&quot;FilterProperty&quot;:&quot;1060&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;1056&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;1056&quot;,&quot;FilterProperty&quot;:&quot;1056&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;MultiSelect&quot;}},{&quot;Key&quot;:&quot;sort&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;sort&quot;,&quot;FilterProperty&quot;:&quot;sort&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;DropDown&quot;}},{&quot;Key&quot;:&quot;price&quot;,&quot;Value&quot;:{&quot;FilterModuleName&quot;:&quot;price&quot;,&quot;FilterProperty&quot;:&quot;price&quot;,&quot;Values&quot;:[],&quot;FilterViewType&quot;:&quot;RangeSlider&quot;}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/Product/FindProductsByFilter</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://www.morhipo.com/kampanya/liste/54747/gunun-surprizi</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                  <stringProp name="RegexExtractor.regex">ModelName&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;Brand&quot;:&quot;Toga Pulla&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">ModelName&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                  <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                  <stringProp name="RegexExtractor.regex">PicturePath&quot;:&quot;https://img-morhipo.mncdn.com/productimages/(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;PicturePath&quot;:&quot;https://img-morhipo.mncdn.com/productimages/8699486075262/[img][4][1][313x429].jpg?0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">ProductPath&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOURL</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                  <stringProp name="RegexExtractor.regex">Brand&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;Brand&quot;:&quot;Toga Pulla&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                  <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                  <stringProp name="RegexExtractor.regex">DiscountPriceFormatted&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                  <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;
int y = Integer.parseInt(x);

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);

String newCampaignName =&quot;&quot; + &quot;${__V(bigBoutiqueNames_${counter_boutique}_g1)}&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
                <stringProp name="ForeachController.inputVal">productTitles</stringProp>
                <stringProp name="ForeachController.returnVal">productTitle</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.urundetay" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;name&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;https://sits-pod48.demandware.net/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot; alt=&quot;(.+?)&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;ee-product&quot; href=&quot;/(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOURL</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">class=&quot;ee-product&quot; href=&quot;/united-colors-of-benetton-kadin-elbise-7797469830012564370.html&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                    <stringProp name="RegexExtractor.regex">&apos;brand&apos;:&apos;(.+?)&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                    <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                    <stringProp name="RegexExtractor.regex">class=&quot;new-price&quot;&gt;\s+(.+?)\s+&lt;span class=&quot;unit&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;div class=&quot;new-price&quot;&gt;
94,99 &lt;span class=&quot;unit&quot;&gt;TL &lt;/span&gt;
&lt;/div&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                    <stringProp name="RegexExtractor.regex">\{&quot;Name&quot;:&quot;(.+?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">jpg&quot;}&apos;&gt;

40

&lt;/a&gt;</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                    <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">-1</stringProp>
                    <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_product&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;
vars.put(&quot;counter_product&quot;, z);

String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newManufacturer =&quot;&quot; + &quot;Morhipo&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newProductMeta =&quot;&quot; + &quot;${__V(productMetas_${counter_price}_g1)}&quot;;
vars.put(&quot;new_productMeta&quot;, newProductMeta);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}

String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g1)}|${__V(productSizes_2_g1)}|${__V(productSizes_3_g1)}|${__V(productSizes_4_g1)}|${__V(productSizes_5_g1)}|${__V(productSizes_6_g1)}|${__V(productSizes_7_g1)}|${__V(productSizes_8_g1)}|${__V(productSizes_9_g1)}|${__V(productSizes_10_g1)}|${__V(productSizes_11_g1)}|${__V(productSizes_12_g1)}|{__V(productSizes_13_g1)}|{__V(productSizes_14_g1)}|{__V(productSizes_15_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as one),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as two),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as three),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as four),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 5) as five),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 6) as six),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 7) as seven),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 8) as eight),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 9) as nine),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 10) as ten),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;/&apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCategory</stringProp>
                  <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang 
WHERE id_lang =2 AND value = &quot;${new_brand}&quot; 
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =9
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultBrand</stringProp>
                  <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =10
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCampaign</stringProp>
                  <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultMagaza</stringProp>
                  <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/9&quot;&gt;&lt;![CDATA[9]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">4</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/10&quot;&gt;&lt;![CDATA[10]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/cocukSubcategorySetter.bsh</stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_morhipo}&quot;&gt;&lt;![CDATA[${supplierId_morhipo}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.morhipo.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_cocukId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_cocukId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/products</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">productId</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 13) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 14) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 15) as oniki))

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">productSizeIds</stringProp>
                  <stringProp name="variableNames">productSizeIds</stringProp>
                </JDBCSampler>
                <hashTree/>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                  <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                  <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.pictureURL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">img-morhipo.mncdn.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/productimages/${new_picture}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">${new_picture}https://img-morhipo.mncdn.com/productimages/i/5343416/[img][4][1].jpg?1126
	at java.net.URI$Parser.fail(URI.java:2848)</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                    <stringProp name="FileSaver.filename">${__property(user.dir)}/images/morhipo/mor_${productId}_</stringProp>
                    <boolProp name="FileSaver.errorsonly">false</boolProp>
                    <boolProp name="FileSaver.skipautonumber">false</boolProp>
                    <boolProp name="FileSaver.skipsuffix">false</boolProp>
                    <boolProp name="FileSaver.successonly">true</boolProp>
                    <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                  </ResultSaver>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${testimagefile}</stringProp>
                        <stringProp name="File.paramname">image</stringProp>
                        <stringProp name="File.mimetype"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=3 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_morhipo} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MODANISA" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_modanisa} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BulkProductUpload.MODNIS" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MODNIS.welcome.POST" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">lang=TR&amp;country=1&amp;return=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.modanisa.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/welcome/post.php</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MODNIS.basortusu" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MODNIS.butikdetay.basortusu" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.modanisa.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/basortusu.htm?fsort=new&amp;ck=1-tr-TRY</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; data-productName=&quot;(.+?)&quot; data-productCategoryName</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; data-productcategoryname=&quot;(.+?)&quot; data-productBrandName</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; src=&quot;http://fns.modanisa.com/r/(.+?)&quot; </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;img class=&quot;product-img product-img-267662 lazy rol_pro&quot; src=&quot;http://fns.modanisa.com/r/pro2/banner-upload/2016-09/modanisa-lazy-load.jpg&quot; data-original=&quot;http://fns.modanisa.com/r/pro2/2017/01/25/n-salopet-elbise--bej--refka-267662-1.jpg&quot; alt=&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPicturesLazy" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productPicturesLazy</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; data-original=&quot;http://fns.modanisa.com/r/(.+?)&quot; </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;img class=&quot;product-img product-img-267662 lazy rol_pro&quot; src=&quot;http://fns.modanisa.com/r/pro2/banner-upload/2016-09/modanisa-lazy-load.jpg&quot; data-original=&quot;http://fns.modanisa.com/r/pro2/2017/01/25/n-salopet-elbise--bej--refka-267662-1.jpg&quot; alt=&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">productClickClass&quot; href=&quot;http://www.modanisa.com/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">productClickClass&quot; href=&quot;http://www.modanisa.com/duz-royal-esarp--lacivert-misirli.html?ck=1-tr-TRY&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">data-productBrandName=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">data-product-price=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">page=(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">basortusu.htm?fsort=new&amp;ck=1-tr-TRY&amp;page=2&quot;&gt;2</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (PAGE)" enabled="true">
              <stringProp name="ForeachController.inputVal">pagingUrls</stringProp>
              <stringProp name="ForeachController.returnVal">pagingUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.endIndex">5</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
                <stringProp name="ForeachController.inputVal">productTitles</stringProp>
                <stringProp name="ForeachController.returnVal">productTitle</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
                <stringProp name="ForeachController.endIndex">90</stringProp>
                <stringProp name="TestPlan.comments">Modanisada paging limit 90 üründür</stringProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MODNIS.urundetay" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">www.modanisa.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                    <stringProp name="RegexExtractor.regex">psize:\[&apos;(.+?)&apos;\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">psize:[&apos;36,38,40,42,44&apos;],</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Modanisa - Başörtüsü&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Modanisa&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
String newPictureLazy =&quot;&quot; + &quot;${__V(productPicturesLazy_${counter_price}_g1)}&quot;;
if(newPicture.contains (&quot;lazy-load&quot;)) {

	vars.put(&quot;new_picture&quot;, newPictureLazy);
}
else
{
	vars.put(&quot;new_picture&quot;, newPicture);
	}




String newsizes =&quot;&quot; + &quot;${__V(productSizes_${counter_price}_g1)}&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

String newsizes =&quot;&quot; + &quot;,${productSizes},&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);


/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;Başörtüsü/&apos;, 1) as first1),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;Başörtüsü/&apos;, 2) as second1)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCategory</stringProp>
                  <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultBrand</stringProp>
                  <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCampaign</stringProp>
                  <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultMagaza</stringProp>
                  <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">4</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">//String mainCategory = vars.get(&quot;featureValueName_category_1&quot;);
String mainCategory = vars.get(&quot;productTitle&quot;);
String currentBrand = vars.get(&quot;new_brand&quot;);
String currentProductTitle = vars.get(&quot;productTitle&quot;);
String currentManufacturer = vars.get(&quot;new_magaza&quot;);

//KADIN
//Giyim
vars.put(&quot;presta_subCategoryId&quot;, &quot;21&quot;);
vars.put(&quot;presta_subSubCategoryId&quot;, &quot;107&quot;);
vars.put(&quot;presta_secondSubCategoryId&quot;, &quot;12&quot;);
vars.put(&quot;presta_secondSubSubCategoryId&quot;, &quot;113&quot;);
	</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_modanisa}&quot;&gt;&lt;![CDATA[${supplierId_modanisa}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.modanisa.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/products</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">productId</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 13) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 14) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 15) as oniki))

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">productSizeIds</stringProp>
                  <stringProp name="variableNames">productSizeIds</stringProp>
                </JDBCSampler>
                <hashTree/>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                  <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                  <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">fns.modanisa.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/r/${new_picture}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">http://fns.modanisa.com/r/</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                    <stringProp name="FileSaver.filename">${__property(user.dir)}/images/modanisa/modnis_${productId}_</stringProp>
                    <boolProp name="FileSaver.errorsonly">false</boolProp>
                    <boolProp name="FileSaver.skipautonumber">false</boolProp>
                    <boolProp name="FileSaver.skipsuffix">false</boolProp>
                    <boolProp name="FileSaver.successonly">true</boolProp>
                    <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                  </ResultSaver>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${testimagefile}</stringProp>
                        <stringProp name="File.paramname">image</stringProp>
                        <stringProp name="File.mimetype"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MODNIS.butikdetay.basortusu.nextPage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.modanisa.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/basortusu.htm?fsort=new&amp;ck=1-tr-TRY&amp;s=${pagingUrl}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; data-productName=&quot;(.+?)&quot; data-productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; data-productcategoryname=&quot;(.+?)&quot; data-productBrandName</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; src=&quot;http://fns.modanisa.com/r/(.+?)&quot; </stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;img class=&quot;product-img product-img-267662 lazy rol_pro&quot; src=&quot;http://fns.modanisa.com/r/pro2/banner-upload/2016-09/modanisa-lazy-load.jpg&quot; data-original=&quot;http://fns.modanisa.com/r/pro2/2017/01/25/n-salopet-elbise--bej--refka-267662-1.jpg&quot; alt=&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPicturesLazy" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productPicturesLazy</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; data-original=&quot;http://fns.modanisa.com/r/(.+?)&quot; </stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;img class=&quot;product-img product-img-267662 lazy rol_pro&quot; src=&quot;http://fns.modanisa.com/r/pro2/banner-upload/2016-09/modanisa-lazy-load.jpg&quot; data-original=&quot;http://fns.modanisa.com/r/pro2/2017/01/25/n-salopet-elbise--bej--refka-267662-1.jpg&quot; alt=&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">productClickClass&quot; href=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOURL</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">productClickClass&quot; href=&quot;http://www.modanisa.com/duz-royal-esarp--lacivert-misirli.html?ck=1-tr-TRY&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                  <stringProp name="RegexExtractor.regex">data-productBrandName=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                  <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                  <stringProp name="RegexExtractor.regex">data-product-price=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">fsort=new&amp;ck=1-tr-TRY&amp;s=(.+?)&quot;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">href=&quot;http://www.modanisa.com/basortusu.htm?fsort=new&amp;ck=1-tr-TRY&amp;s=3&quot;&gt;3&lt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                  <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MODNIS.giyim" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MODNIS.butikdetay.giyim" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.modanisa.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/tesettur-giyim.htm?fsort=new&amp;ck=1-tr-TRY</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; data-productName=&quot;(.+?)&quot; data-productCategoryName</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; data-productcategoryname=&quot;(.+?)&quot; data-productBrandName</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; src=&quot;http://fns.modanisa.com/r/(.+?)&quot; </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;img class=&quot;product-img product-img-267662 lazy rol_pro&quot; src=&quot;http://fns.modanisa.com/r/pro2/banner-upload/2016-09/modanisa-lazy-load.jpg&quot; data-original=&quot;http://fns.modanisa.com/r/pro2/2017/01/25/n-salopet-elbise--bej--refka-267662-1.jpg&quot; alt=&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPicturesLazy" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productPicturesLazy</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; data-original=&quot;http://fns.modanisa.com/r/(.+?)&quot; </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;img class=&quot;product-img product-img-267662 lazy rol_pro&quot; src=&quot;http://fns.modanisa.com/r/pro2/banner-upload/2016-09/modanisa-lazy-load.jpg&quot; data-original=&quot;http://fns.modanisa.com/r/pro2/2017/01/25/n-salopet-elbise--bej--refka-267662-1.jpg&quot; alt=&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">productClickClass&quot; href=&quot;http://www.modanisa.com/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">productClickClass&quot; href=&quot;http://www.modanisa.com/duz-royal-esarp--lacivert-misirli.html?ck=1-tr-TRY&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">data-productBrandName=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;ins&gt;(.+?) TL&lt;/ins&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;ins&gt;119,90</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; data-product-price=&quot;(.+?)&quot; href</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrlsold" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">fsort=new&amp;ck=1-tr-TRY&amp;s=(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">page=(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (PAGE)" enabled="true">
              <stringProp name="ForeachController.inputVal">pagingUrls</stringProp>
              <stringProp name="ForeachController.returnVal">pagingUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.endIndex">5</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
                <stringProp name="ForeachController.inputVal">productTitles</stringProp>
                <stringProp name="ForeachController.returnVal">productTitle</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
                <stringProp name="ForeachController.endIndex">90</stringProp>
                <stringProp name="TestPlan.comments">Modanisada paging limit 90 üründür</stringProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MODNIS.urundetay" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">www.modanisa.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                    <stringProp name="RegexExtractor.regex">psize:\[&apos;(.+?)&apos;\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">psize:[&apos;36,38,40,42,44&apos;],</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                  <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Modanisa - Tesettür Giyim&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g1)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Modanisa&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPictures_${counter_price}_g1)}&quot;;
String newPictureLazy =&quot;&quot; + &quot;${__V(productPicturesLazy_${counter_price}_g1)}&quot;;
if(newPicture.contains (&quot;lazy-load&quot;)) {

	vars.put(&quot;new_picture&quot;, newPictureLazy);
}
else
{
	vars.put(&quot;new_picture&quot;, newPicture);
	}




String newsizes =&quot;&quot; + &quot;,${productSizes},&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;Tesettür Giyim/&apos;, 2) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;Tesettür Giyim/Üst Giyim/&apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;Tesettür Giyim/Alt Giyim/&apos;, 2) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;Tesettür Giyim/Elbise/&apos;, 2) as fourth),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;Tesettür Giyim/Tunikler/&apos;, 2) as fifth),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;Tesettür Giyim/Ev Giyim/&apos;, 2) as sixth),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;Tesettür Giyim/Hamile Giyim/&apos;, 2) as seventy),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos;Tesettür Giyim/Triko/&apos;, 2) as eighty)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCategory</stringProp>
                  <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultBrand</stringProp>
                  <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultCampaign</stringProp>
                  <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">resultMagaza</stringProp>
                  <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">4</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                  <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                    <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                  <stringProp name="BeanShellSampler.query">//String mainCategory = vars.get(&quot;featureValueName_category_1&quot;);
String mainCategory = vars.get(&quot;productTitle&quot;);
String currentBrand = vars.get(&quot;new_brand&quot;);
String currentProductTitle = vars.get(&quot;productTitle&quot;);
String currentManufacturer = vars.get(&quot;new_magaza&quot;);

//KADIN
//Giyim
vars.put(&quot;presta_subCategoryId&quot;, &quot;21&quot;);
vars.put(&quot;presta_subSubCategoryId&quot;, &quot;109&quot;);
vars.put(&quot;presta_secondSubCategoryId&quot;, &quot;12&quot;);
vars.put(&quot;presta_secondSubSubCategoryId&quot;, &quot;113&quot;);
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_modanisa}&quot;&gt;&lt;![CDATA[${supplierId_modanisa}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.modanisa.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/products</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">productId</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                  <stringProp name="dataSource">mysqlcon</stringProp>
                  <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 13) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 14) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 15) as oniki))

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable">productSizeIds</stringProp>
                  <stringProp name="variableNames">productSizeIds</stringProp>
                </JDBCSampler>
                <hashTree/>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                  <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                  <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                      <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">fns.modanisa.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/r/${new_picture}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">http://fns.modanisa.com/r/</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                    <stringProp name="FileSaver.filename">${__property(user.dir)}/images/modanisa/modnis_${productId}_</stringProp>
                    <boolProp name="FileSaver.errorsonly">false</boolProp>
                    <boolProp name="FileSaver.skipautonumber">false</boolProp>
                    <boolProp name="FileSaver.skipsuffix">false</boolProp>
                    <boolProp name="FileSaver.successonly">true</boolProp>
                    <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                  </ResultSaver>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${testimagefile}</stringProp>
                        <stringProp name="File.paramname">image</stringProp>
                        <stringProp name="File.mimetype"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MODNIS.butikdetay.tesettur.nextPage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.modanisa.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/tesettur-giyim.htm?fsort=new&amp;ck=1-tr-TRY&amp;s=${pagingUrl}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; data-productName=&quot;(.+?)&quot; data-productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;category&apos;: &apos;(.+?)&apos;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; data-productcategoryname=&quot;(.+?)&quot; data-productBrandName</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPictures" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productPictures</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; src=&quot;http://fns.modanisa.com/r/(.+?)&quot; </stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;img class=&quot;product-img product-img-267662 lazy rol_pro&quot; src=&quot;http://fns.modanisa.com/r/pro2/banner-upload/2016-09/modanisa-lazy-load.jpg&quot; data-original=&quot;http://fns.modanisa.com/r/pro2/2017/01/25/n-salopet-elbise--bej--refka-267662-1.jpg&quot; alt=&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPicturesLazy" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productPicturesLazy</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; data-original=&quot;http://fns.modanisa.com/r/(.+?)&quot; </stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;img class=&quot;product-img product-img-267662 lazy rol_pro&quot; src=&quot;http://fns.modanisa.com/r/pro2/banner-upload/2016-09/modanisa-lazy-load.jpg&quot; data-original=&quot;http://fns.modanisa.com/r/pro2/2017/01/25/n-salopet-elbise--bej--refka-267662-1.jpg&quot; alt=&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">productClickClass&quot; href=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOURL</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">productClickClass&quot; href=&quot;http://www.modanisa.com/duz-royal-esarp--lacivert-misirli.html?ck=1-tr-TRY&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                  <stringProp name="RegexExtractor.regex">data-productBrandName=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                  <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                  <stringProp name="RegexExtractor.regex">data-product-price=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                  <stringProp name="RegexExtractor.regex">fsort=new&amp;ck=1-tr-TRY&amp;s=(.+?)&quot;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">href=&quot;http://www.modanisa.com/basortusu.htm?fsort=new&amp;ck=1-tr-TRY&amp;s=3&quot;&gt;3&lt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                  <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_modanisa} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BOYNER-KADIN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_boyner} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BOYNER.kadin" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Kadin.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;kadin-giyim-c-1001&quot; UNION select &quot;kadin-ic-giyim-c-1002&quot; UNION select &quot;kadin-pijama-modelleri-c-1003&quot; UNION select &quot;kadin-ayakkabi-modelleri-c-1004&quot; UNION select &quot;kadin-spor-giyim-c-5001&quot; UNION select &quot;kadin-canta-modelleri-c-1005&quot; UNION select &quot;kadin-aksesuar-c-1006&quot;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BOYNER.kadin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.boyner.com.tr</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}/1/?dropListingPageSize=100</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,\s+&apos;category&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$5$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; data-productcategoryname=&quot;(.+?)&quot; data-productBrandName</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">data-original=&quot;https://statics.boyner.com.tr/productimages/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">data-original=&quot;https://statics.boyner.com.tr/productimages/520406566_85_01_325_451.jpg&quot;
</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a href=&quot;(.+?)&quot;\s+class=&quot;product-figure</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">product-figure-wrap&quot;&gt;
        &lt;a href=&quot;/only-mont-575263-1001&quot;
           class=&quot;product-figure ecommerceClick
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$4$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$3$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">kadin-giyim-c-1001/(.+?)&quot; rel=&quot;next&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">kadin-giyim-c-1001/2&quot; rel=&quot;next&quot;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productIds</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTID</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&apos;id&apos;: &apos;575263&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productPics</stringProp>
              <stringProp name="ForeachController.returnVal">productPic</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="TestPlan.comments">Modanisada paging limit 90 üründür</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newProductId =&quot;&quot; + &quot;${__V(productIds_${counter_url}_g2)}&quot;;
vars.put(&quot;new_ProductId&quot;, newProductId);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BOYNER.urunOzellikleri" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.boyner.com.tr</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/attributeselection/${new_ProductId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;CodeName&quot;:&quot;size&quot;,&quot;ValueText&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;CodeName&quot;:&quot;size&quot;,&quot;ValueText&quot;:&quot;L&quot;,</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BOYNER.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.boyner.com.tr</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColors</stringProp>
                  <stringProp name="RegexExtractor.regex">title=&quot;(.+?)&quot;&gt;\s+&lt;em style</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">title=&quot;Siyah&quot;&gt;
                                                            &lt;em style=&quot;background-color:#000000&quot;&gt;&lt;/em&gt;
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">cats: &quot;(.+?)&quot;,\s+name: &quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">cats: &quot;kadin-giyim&quot;,
        name: &quot;Only Gömlek&quot;,
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Boyner - Kadın&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g3)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g4)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Boyner&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g5)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);





String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g1)}|${__V(productSizes_2_g1)}|${__V(productSizes_3_g1)}|${__V(productSizes_4_g1)}|${__V(productSizes_5_g1)}|${__V(productSizes_6_g1)}|${__V(productColors_1_g1)}|${__V(productColors_2_g1)}|${__V(productColors_3_g1)}|${__V(productColors_4_g1)}|${__V(productColors_5_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_boyner}&quot;&gt;&lt;![CDATA[${supplierId_boyner}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.boyner.com.tr/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">statics.boyner.com.tr</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/productimages/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://fns.modanisa.com/r/</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/boyner/boyner_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_boyner} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BOYNER-ERKEK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=2 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_boyner} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BOYNER.erkek" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Erkek.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;erkek-giyim-c-2001&quot; UNION select &quot;erkek-ic-giyim-c-2002&quot; UNION select &quot;erkek-pijama-takimlari-c-2003&quot; UNION select &quot;erkek-ayakkabi-modelleri-c-2004&quot; UNION select &quot;erkek-spor-giyim-c-5002&quot; UNION select &quot;erkek-canta-modelleri-c-2005&quot; UNION select &quot;erkek-aksesuar-c-2006&quot;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BOYNER.erkek" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.boyner.com.tr</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}/1/?dropListingPageSize=100</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,\s+&apos;category&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$5$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; data-productcategoryname=&quot;(.+?)&quot; data-productBrandName</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">data-original=&quot;https://statics.boyner.com.tr/productimages/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">data-original=&quot;https://statics.boyner.com.tr/productimages/520406566_85_01_325_451.jpg&quot;
</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a href=&quot;(.+?)&quot;\s+class=&quot;product-figure</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">product-figure-wrap&quot;&gt;
        &lt;a href=&quot;/only-mont-575263-1001&quot;
           class=&quot;product-figure ecommerceClick
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$4$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$3$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">kadin-giyim-c-1001/(.+?)&quot; rel=&quot;next&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">kadin-giyim-c-1001/2&quot; rel=&quot;next&quot;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productIds</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTID</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&apos;id&apos;: &apos;575263&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productPics</stringProp>
              <stringProp name="ForeachController.returnVal">productPic</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="TestPlan.comments">Modanisada paging limit 90 üründür</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newProductId =&quot;&quot; + &quot;${__V(productIds_${counter_url}_g2)}&quot;;
vars.put(&quot;new_ProductId&quot;, newProductId);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BOYNER.urunOzellikleri" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.boyner.com.tr</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/attributeselection/${new_ProductId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;CodeName&quot;:&quot;size&quot;,&quot;ValueText&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;CodeName&quot;:&quot;size&quot;,&quot;ValueText&quot;:&quot;L&quot;,</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BOYNER.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.boyner.com.tr</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColors</stringProp>
                  <stringProp name="RegexExtractor.regex">title=&quot;(.+?)&quot;&gt;\s+&lt;em style</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">title=&quot;Siyah&quot;&gt;
                                                            &lt;em style=&quot;background-color:#000000&quot;&gt;&lt;/em&gt;
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">cats: &quot;(.+?)&quot;,\s+name: &quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">cats: &quot;kadin-giyim&quot;,
        name: &quot;Only Gömlek&quot;,
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Boyner - Erkek&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g3)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g4)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Boyner&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g5)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);





String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g1)}|${__V(productSizes_2_g1)}|${__V(productSizes_3_g1)}|${__V(productSizes_4_g1)}|${__V(productSizes_5_g1)}|${__V(productSizes_6_g1)}|${__V(productColors_1_g1)}|${__V(productColors_2_g1)}|${__V(productColors_3_g1)}|${__V(productColors_4_g1)}|${__V(productColors_5_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/erkekSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_boyner}&quot;&gt;&lt;![CDATA[${supplierId_boyner}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.boyner.com.tr/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_erkekId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_erkekId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">statics.boyner.com.tr</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/productimages/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://fns.modanisa.com/r/</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/boyner/boyner_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=2 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_boyner} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BOYNER-COCUK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=3 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_boyner} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BOYNER.cocuk" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Cocuk.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;cocuk-giyim-c-3001&quot; UNION select &quot;cocuk-ic-giyim-c-3002&quot; UNION select &quot;cocuk-pijama-ev-giyim-c-3003&quot; UNION select &quot;cocuk-ayakkabi-c-3004&quot; UNION select &quot;bebek-c-3005&quot; UNION select &quot;oyuncak-oyun-setleri-c-3006&quot; UNION select &quot;cocuk-okul-formasi-c-3008&quot;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BOYNER.cocuk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.boyner.com.tr</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}/1/?dropListingPageSize=100</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,\s+&apos;category&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$5$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; data-productcategoryname=&quot;(.+?)&quot; data-productBrandName</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">prc-picture&quot; src=&quot;(.+?)&quot; data-original=&apos;(.+?)&apos; onerror=&quot; this.src=&apos;(.+?)&apos; &quot; title=&quot;(.+?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">data-original=&quot;https://statics.boyner.com.tr/productimages/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">data-original=&quot;https://statics.boyner.com.tr/productimages/520406566_85_01_325_451.jpg&quot;
</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a href=&quot;(.+?)&quot;\s+class=&quot;product-figure</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">product-figure-wrap&quot;&gt;
        &lt;a href=&quot;/only-mont-575263-1001&quot;
           class=&quot;product-figure ecommerceClick
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$4$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$3$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">kadin-giyim-c-1001/(.+?)&quot; rel=&quot;next&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">kadin-giyim-c-1001/2&quot; rel=&quot;next&quot;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productIds</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTID</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&apos;id&apos;: &apos;575263&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productPics</stringProp>
              <stringProp name="ForeachController.returnVal">productPic</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newProductId =&quot;&quot; + &quot;${__V(productIds_${counter_url}_g2)}&quot;;
vars.put(&quot;new_ProductId&quot;, newProductId);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BOYNER.urunOzellikleri" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.boyner.com.tr</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/attributeselection/${new_ProductId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;CodeName&quot;:&quot;size&quot;,&quot;ValueText&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;CodeName&quot;:&quot;size&quot;,&quot;ValueText&quot;:&quot;L&quot;,</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BOYNER.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.boyner.com.tr</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColors</stringProp>
                  <stringProp name="RegexExtractor.regex">title=&quot;(.+?)&quot;&gt;\s+&lt;em style</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">title=&quot;Siyah&quot;&gt;
                                                            &lt;em style=&quot;background-color:#000000&quot;&gt;&lt;/em&gt;
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">cats: &quot;(.+?)&quot;,\s+name: &quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">cats: &quot;kadin-giyim&quot;,
        name: &quot;Only Gömlek&quot;,
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Boyner - Çocuk&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g3)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;${__V(productBrands_${counter_price}_g4)}&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Boyner&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g5)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);
if(cat_replaced.contains (&quot;productCategoryNames&quot;)) {

	vars.put(&quot;new_category&quot;, &quot;Diğer&quot;);
	vars.put(&quot;featureValueId_category&quot;, &quot;${kategori_digerid}&quot;);
}
else
{
	vars.put(&quot;new_category&quot;, cat_replaced);
	
	}


String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);





String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g1)}|${__V(productSizes_2_g1)}|${__V(productSizes_3_g1)}|${__V(productSizes_4_g1)}|${__V(productSizes_5_g1)}|${__V(productSizes_6_g1)}|${__V(productColors_1_g1)}|${__V(productColors_2_g1)}|${__V(productColors_3_g1)}|${__V(productColors_4_g1)}|${__V(productColors_5_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/cocukSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_boyner}&quot;&gt;&lt;![CDATA[${supplierId_boyner}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;https://www.boyner.com.tr/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_cocukId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_cocukId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">statics.boyner.com.tr</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/productimages/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://fns.modanisa.com/r/</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/boyner/boyner_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=3 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_boyner} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="KOTON-KADIN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_koton} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="KOTON.kadin" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Kadin.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;tr/kadin/giyim/c/M01-C02-N01?q=%3Arelevance&amp;psize=192&quot; UNION select &quot;tr/kadin/ayakkabi/c/M01-C02-N02&quot; UNION select &quot;tr/kadin/aksesuar/c/M01-C02-N03?q=%3Arelevance&amp;psize=192&quot; UNION select &quot;tr/kadin/buyuk-beden/c/M01-C02-N04&quot; UNION select &quot;tr/kadin/kozmetik/c/M01-C02-AK113&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="KOTON.kadin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.koton.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                <stringProp name="RegexExtractor.regex">prc-name&quot; href=&quot;(.+?)&quot;&gt;(.+?)\&amp;nbsp</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;a class=&quot;prc-name&quot; href=&quot;/tr/kadin-destroyed-jean-pantolon/p/7YAK47299DDFD3&quot;&gt;Destroyed Jean Pantolon&amp;nbsp;İndigo&lt;/a&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,\s+&apos;category&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$5$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;div class=&quot;image&quot;&gt;\s+&lt;img src=&quot;\/\/img-kotonw.mncdn.com(.+?)&quot; alt</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;img src=&quot;//img-kotonw.mncdn.com/static/product-images/9167531048990/7YAK47299DDFD3-G01-medium1-V01.jpg&quot; alt=&quot;Destroyed Jean Pantolon&quot; title=&quot;Destroyed Jean Pantolon&quot;&gt;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">prc-name&quot; href=&quot;(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;a class=&quot;prc-name&quot; href=&quot;/tr/kadin-destroyed-jean-pantolon/p/7YAK47299DDFD3&quot;&gt;Destroyed Jean Pantolon&amp;nbsp;İndigo&lt;/a&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$4$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span class=&quot;newPrice&quot;&gt; ₺(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;newPrice&quot;&gt; ₺69,99&lt;/span&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">kadin-giyim-c-1001/(.+?)&quot; rel=&quot;next&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">kadin-giyim-c-1001/2&quot; rel=&quot;next&quot;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productIds</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTID</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&apos;id&apos;: &apos;575263&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productPics</stringProp>
              <stringProp name="ForeachController.returnVal">productPic</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="TestPlan.comments">Modanisada paging limit 90 üründür</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="KOTON.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.koton.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColor</stringProp>
                  <stringProp name="RegexExtractor.regex">Renk:&lt;/b&gt; (.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;b&gt;Renk:&lt;/b&gt; Siyah&lt;/span&gt;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;li&gt;\s+&lt;a href=&quot;(.+?)&quot; name=&quot;(.+?)&quot;\s+&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$3$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;li&gt;
                        &lt;a href=&quot;/tr/kadin-arzu-sabanci-for-koton-t-shirt/p/7YAK12226UK881S&quot; name=&quot;/kadin-arzu-sabanci-for-koton-t-shirt/p/7YAK12226UK881S&quot;
                            &gt;S&lt;/a&gt;
                    &lt;/li&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">\[&apos;pcat&apos;\] = &apos;(.+?)&apos;;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">[&apos;pcat&apos;] = &apos;T-Shirt&apos;;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">productDetailDescription&quot;&gt;\s+&lt;h1&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">productDetailDescription&quot;&gt;
        &lt;h1&gt;Arzu Sabancı For Koton T-Shirt&lt;/h1&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Koton - Kadın&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;Koton&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Koton&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);





String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g3)}|${__V(productSizes_2_g3)}|${__V(productSizes_3_g3)}|${__V(productSizes_4_g3)}|${__V(productSizes_5_g3)}|${__V(productSizes_6_g3)}|${productColor}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_koton}&quot;&gt;&lt;![CDATA[${supplierId_koton}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.koton.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">img-kotonw.mncdn.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://fns.modanisa.com/r/</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/koton/koton_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_koton} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="KOTON-ERKEK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=2 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_koton} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="KOTON.erkek" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Erkek.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;tr/erkek/giyim/c/M01-C01-N01&quot; UNION select &quot;tr/erkek/ayakkabi/c/M01-C01-N02&quot; UNION select &quot;tr/erkek/kozmetik/c/M01-C01-AK113&quot; UNION select &quot;tr/erkek/aksesuar/c/M01-C01-N03&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="KOTON.erkek" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.koton.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                <stringProp name="RegexExtractor.regex">prc-name&quot; href=&quot;(.+?)&quot;&gt;(.+?)\&amp;nbsp</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;a class=&quot;prc-name&quot; href=&quot;/tr/kadin-destroyed-jean-pantolon/p/7YAK47299DDFD3&quot;&gt;Destroyed Jean Pantolon&amp;nbsp;İndigo&lt;/a&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,\s+&apos;category&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$5$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;div class=&quot;image&quot;&gt;\s+&lt;img src=&quot;\/\/img-kotonw.mncdn.com(.+?)&quot; alt</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;img src=&quot;//img-kotonw.mncdn.com/static/product-images/9167531048990/7YAK47299DDFD3-G01-medium1-V01.jpg&quot; alt=&quot;Destroyed Jean Pantolon&quot; title=&quot;Destroyed Jean Pantolon&quot;&gt;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">prc-name&quot; href=&quot;(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;a class=&quot;prc-name&quot; href=&quot;/tr/kadin-destroyed-jean-pantolon/p/7YAK47299DDFD3&quot;&gt;Destroyed Jean Pantolon&amp;nbsp;İndigo&lt;/a&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$4$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span class=&quot;newPrice&quot;&gt; ₺(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;newPrice&quot;&gt; ₺69,99&lt;/span&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">kadin-giyim-c-1001/(.+?)&quot; rel=&quot;next&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">kadin-giyim-c-1001/2&quot; rel=&quot;next&quot;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productIds</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTID</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&apos;id&apos;: &apos;575263&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productPics</stringProp>
              <stringProp name="ForeachController.returnVal">productPic</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="TestPlan.comments">Modanisada paging limit 90 üründür</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="KOTON.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.koton.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColor</stringProp>
                  <stringProp name="RegexExtractor.regex">Renk:&lt;/b&gt; (.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;b&gt;Renk:&lt;/b&gt; Siyah&lt;/span&gt;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;li&gt;\s+&lt;a href=&quot;(.+?)&quot; name=&quot;(.+?)&quot;\s+&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$3$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;li&gt;
                        &lt;a href=&quot;/tr/kadin-arzu-sabanci-for-koton-t-shirt/p/7YAK12226UK881S&quot; name=&quot;/kadin-arzu-sabanci-for-koton-t-shirt/p/7YAK12226UK881S&quot;
                            &gt;S&lt;/a&gt;
                    &lt;/li&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">\[&apos;pcat&apos;\] = &apos;(.+?)&apos;;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">[&apos;pcat&apos;] = &apos;T-Shirt&apos;;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">productDetailDescription&quot;&gt;\s+&lt;h1&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">productDetailDescription&quot;&gt;
        &lt;h1&gt;Arzu Sabancı For Koton T-Shirt&lt;/h1&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Koton - Erkek&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;Koton&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Koton&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);





String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g3)}|${__V(productSizes_2_g3)}|${__V(productSizes_3_g3)}|${__V(productSizes_4_g3)}|${__V(productSizes_5_g3)}|${__V(productSizes_6_g3)}|${productColor}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/erkekSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_koton}&quot;&gt;&lt;![CDATA[${supplierId_koton}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.koton.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_erkekId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_erkekId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">img-kotonw.mncdn.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://fns.modanisa.com/r/</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/koton/koton_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=2 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_koton} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="KOTON-COCUK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=3 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_koton} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="KOTON.cocuk" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Cocuk.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;tr/kiz-cocuk/c/M01-C04&quot; UNION select &quot;tr/erkek-cocuk/c/M01-C03&quot; UNION select &quot;tr/kiz-cocuk/kiz-bebek/c/M01-C04-K02&quot; UNION select &quot;tr/erkek-cocuk/erkek-bebek/c/M01-C03-K01&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="KOTON.cocuk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.koton.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productTitles</stringProp>
                <stringProp name="RegexExtractor.regex">prc-name&quot; href=&quot;(.+?)&quot;&gt;(.+?)\&amp;nbsp</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;a class=&quot;prc-name&quot; href=&quot;/tr/kadin-destroyed-jean-pantolon/p/7YAK47299DDFD3&quot;&gt;Destroyed Jean Pantolon&amp;nbsp;İndigo&lt;/a&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,\s+&apos;category&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$5$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;div class=&quot;image&quot;&gt;\s+&lt;img src=&quot;\/\/img-kotonw.mncdn.com(.+?)&quot; alt</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;img src=&quot;//img-kotonw.mncdn.com/static/product-images/9167531048990/7YAK47299DDFD3-G01-medium1-V01.jpg&quot; alt=&quot;Destroyed Jean Pantolon&quot; title=&quot;Destroyed Jean Pantolon&quot;&gt;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">prc-name&quot; href=&quot;(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;a class=&quot;prc-name&quot; href=&quot;/tr/kadin-destroyed-jean-pantolon/p/7YAK47299DDFD3&quot;&gt;Destroyed Jean Pantolon&amp;nbsp;İndigo&lt;/a&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productBrands" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productBrands</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;,\s+&apos;price&apos;: &apos;(.+?)&apos;,\s+&apos;brand&apos;: &apos;(.+?)&apos;,</stringProp>
                <stringProp name="RegexExtractor.template">$4$</stringProp>
                <stringProp name="RegexExtractor.default">NOBRAND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  data = {
            &apos;name&apos;: &apos;Only  Mont&apos;,
                    &apos;id&apos;: &apos;575263&apos;,
                    &apos;price&apos;: &apos;129.99&apos;,
                    &apos;brand&apos;: &apos; Only&apos;,
                    &apos;variant&apos;: &apos;&apos;,
                    &apos;category&apos;: &apos;Kadın Giyim&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMarketPrices" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMarketPrices</stringProp>
                <stringProp name="RegexExtractor.regex">marketprice&quot;&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOMARKETPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;marketprice&quot;&gt;598,00tl&lt;/span&gt;
                                    &lt;span class=&quot;saleprice&quot;&gt;99,99 &lt;i&gt;tl&lt;/i&gt;&lt;/span&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span class=&quot;newPrice&quot;&gt; ₺(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;span class=&quot;newPrice&quot;&gt; ₺69,99&lt;/span&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; vol=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">kadin-giyim-c-1001/(.+?)&quot; rel=&quot;next&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">kadin-giyim-c-1001/2&quot; rel=&quot;next&quot;
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productIds</stringProp>
                <stringProp name="RegexExtractor.regex">data = {\s+&apos;name&apos;: &apos;(.+?)&apos;,\s+&apos;id&apos;: &apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTID</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&apos;id&apos;: &apos;575263&apos;,
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productMetas" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productMetas</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;clearfix&quot; href=&quot;/(.+?)/UrunDetay</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTMETAS</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">vol=&quot;|40|_1|35|_0|36|_0|37|_0|38|_0|39|_1|&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryIds" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productCategoryIds</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;categoryMain-(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">id=&quot;categoryMain-119&quot; data-ty-value=&quot;119&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productPics</stringProp>
              <stringProp name="ForeachController.returnVal">productPic</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="TestPlan.comments">Modanisada paging limit 90 üründür</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="KOTON.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.koton.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColor</stringProp>
                  <stringProp name="RegexExtractor.regex">Renk:&lt;/b&gt; (.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;b&gt;Renk:&lt;/b&gt; Siyah&lt;/span&gt;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;li&gt;\s+&lt;a href=&quot;(.+?)&quot; name=&quot;(.+?)&quot;\s+&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$3$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;li&gt;
                        &lt;a href=&quot;/tr/kadin-arzu-sabanci-for-koton-t-shirt/p/7YAK12226UK881S&quot; name=&quot;/kadin-arzu-sabanci-for-koton-t-shirt/p/7YAK12226UK881S&quot;
                            &gt;S&lt;/a&gt;
                    &lt;/li&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">\[&apos;pcat&apos;\] = &apos;(.+?)&apos;;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">[&apos;pcat&apos;] = &apos;T-Shirt&apos;;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">productDetailDescription&quot;&gt;\s+&lt;h1&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">productDetailDescription&quot;&gt;
        &lt;h1&gt;Arzu Sabancı For Koton T-Shirt&lt;/h1&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Koton - Çocuk&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;Koton&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Koton&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);





String newsizes =&quot;&quot; + &quot;|${__V(productSizes_1_g3)}|${__V(productSizes_2_g3)}|${__V(productSizes_3_g3)}|${__V(productSizes_4_g3)}|${__V(productSizes_5_g3)}|${__V(productSizes_6_g3)}|${productColor}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/cocukSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_koton}&quot;&gt;&lt;![CDATA[${supplierId_koton}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.koton.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_cocukId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_cocukId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">img-kotonw.mncdn.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">http://fns.modanisa.com/r/</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/koton/koton_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=3 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_koton} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LCW-KADIN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_lcw} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LCW.kadin" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Kadin.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;tr-TR/TR/urun-grubu/kadin/1?PageSize=100#&quot; UNION select &quot;tr-TR/TR/urun-grubu/genc-kiz?PageSize=100&quot; UNION select &quot;tr-TR/TR/kategori/kadin/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29116&quot; UNION select &quot;tr-TR/TR/kategori/kadin/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29119&quot; UNION select &quot;tr-TR/TR/kategori/kadin/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29144&quot; UNION select &quot;tr-TR/TR/kategori/genc-kiz/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29116&quot; UNION select &quot;tr-TR/TR/kategori/genc-kiz/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29119&quot; UNION select &quot;tr-TR/TR/kategori/genc-kiz/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29144&quot; UNION select &quot;tr-TR/TR/kategori/genc-kiz/aksesuar/1?LastFilter=m_981&amp;m_981=29123&quot; UNION select &quot;tr-TR/TR/lcw-kozmetik/yuz/allik&quot; UNION select &quot;tr-TR/TR/lcw-kozmetik/yuz/pudra&quot; UNION select &quot;tr-TR/TR/lcw-kozmetik/goz/rimel&quot; UNION select &quot;tr-TR/TR/lcw-kozmetik/goz/far&quot; UNION select &quot;tr-TR/TR/lcw-kozmetik/dudak/ruj&quot; UNION select &quot;tr-TR/TR/kategori/kadin/aksesuar/1?LastFilter=m_981&amp;m_981=30295&quot; UNION select &quot;tr-TR/TR/kategori/kadin/aksesuar/1?LastFilter=m_981&amp;m_981=29122&quot; UNION select &quot;tr-TR/TR/kategori/kadin/aksesuar/1?LastFilter=m_981&amp;m_981=29123&quot; UNION select &quot;tr-TR/TR/kategori/kadin/aksesuar/1?LastFilter=m_981&amp;m_981=30302&quot; UNION select &quot;tr-TR/TR/kategori/kadin/aksesuar/1?LastFilter=m_981&amp;m_981=30319&quot; UNION select &quot;tr-TR/TR/kategori/kadin/aksesuar/1?LastFilter=m_981&amp;m_981=29134&quot; UNION select &quot;tr-TR/TR/kategori/kadin/aksesuar/1?LastFilter=m_981&amp;m_981=30312&quot; UNION select &quot;tr-TR/TR/kategori/kadin/aksesuar/1?LastFilter=m_981&amp;m_981=30181&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LCW.kadin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.lcwaikiki.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">button href=&quot;(.+?)&quot; class=&quot;button</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">button href=&quot;/tr-TR/TR/urun/LC-WAIKIKI/kadin/Lastik-Toka/2701006/524884&quot; class=&quot;button
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productUrls</stringProp>
              <stringProp name="ForeachController.returnVal">productUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LCW.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.lcwaikiki.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColors</stringProp>
                  <stringProp name="RegexExtractor.regex">optionId=&quot;(.+?)&quot; alt=&quot;(.+?)&quot; title=</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">optionId=&quot;523435&quot; alt=&quot;New Black&quot; title=&quot;New Black&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSize" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSize</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;meta name=&quot;Size&quot; content=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;meta name=&quot;Size&quot; content=&quot;3XL,L,M,S,XL,XXL&quot; /&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">meta name=&quot;ProductName&quot; content=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;meta name=&quot;ProductName&quot; content=&quot;Bluz&quot; /&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;head&gt;\s+&lt;title&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;head&gt;
    &lt;title&gt;Lacivert Bluz -7YG632Z8-031 - LC Waikiki&lt;/title&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPic" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPic</stringProp>
                  <stringProp name="RegexExtractor.regex">img src=&quot;http://(.+?)/ProductImages/(.+?)&quot; alt=&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">img src=&quot;http://akcdn1.lcwaikiki.com/ProductImages/20171/2/2680035/M_20171-7Y7675Z8-E0N_A.jpg&quot; alt=&quot;&quot; title=&quot;&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPicDomain" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPicDomain</stringProp>
                  <stringProp name="RegexExtractor.regex">img src=&quot;http://(.+?)/ProductImages/(.+?)&quot; alt=&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTUREDOMAIN</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">img src=&quot;http://akcdn1.lcwaikiki.com/ProductImages/20171/2/2680035/M_20171-7Y7675Z8-E0N_A.jpg&quot; alt=&quot;&quot; title=&quot;&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrice" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrice</stringProp>
                  <stringProp name="RegexExtractor.regex">option-price-cash(.+?)&gt;(.+?) TL&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;p class=&quot;option-price-cash warn&quot;&gt;109,95 TL&lt;/p&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;LCW - Kadın&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${productSalePrice}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;LC Waikiki&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;LC Waikiki&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${productPic}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newPictureDomain =&quot;&quot; + &quot;${productPicDomain}&quot;;
vars.put(&quot;new_pictureDomain&quot;, newPictureDomain);





String newsizes =&quot;&quot; + &quot;,${productSize},${__V(productColors_1_g2)},${__V(productColors_2_g2)},${__V(productColors_3_g2)},${__V(productColors_4_g2)},${__V(productColors_5_g2)}&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_lcw}&quot;&gt;&lt;![CDATA[${supplierId_lcw}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.lcwaikiki.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${new_pictureDomain}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ProductImages/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/lcw/lcw_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_lcw} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LCW-ERKEK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=2 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_lcw} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LCW.erkek" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Erkek.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;tr-TR/TR/urun-grubu/erkek&quot; UNION select &quot;tr-TR/TR/urun-grubu/genc-erkek&quot; UNION select &quot;tr-TR/TR/kategori/erkek/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29116&quot; UNION select &quot;tr-TR/TR/kategori/erkek/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29119&quot; UNION select &quot;tr-TR/TR/kategori/erkek/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29144&quot; UNION select &quot;tr-TR/TR/kategori/genc-erkek/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29116&quot; UNION select &quot;tr-TR/TR/kategori/genc-erkek/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29119&quot; UNION select &quot;tr-TR/TR/kategori/genc-erkek/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29144&quot; UNION select &quot;tr-TR/TR/kategori/erkek/aksesuar/1?LastFilter=m_981&amp;m_981=29122&quot; UNION select &quot;tr-TR/TR/kategori/erkek/aksesuar/1?LastFilter=m_981&amp;m_981=29123&quot; UNION select &quot;tr-TR/TR/kategori/erkek/aksesuar/1?LastFilter=m_981&amp;m_981=30298&quot; UNION select &quot;tr-TR/TR/kategori/erkek/aksesuar/1?LastFilter=m_981&amp;m_981=30302&quot; UNION select &quot;tr-TR/TR/kategori/erkek/aksesuar/1?LastFilter=m_981&amp;m_981=30319&quot; UNION select &quot;tr-TR/TR/kategori/erkek/aksesuar/1?LastFilter=m_981&amp;m_981=29134&quot; UNION select &quot;tr-TR/TR/kategori/erkek/aksesuar/1?LastFilter=m_981&amp;m_981=29135&quot; UNION select &quot;tr-TR/TR/kategori/erkek/aksesuar/1?LastFilter=m_981&amp;m_981=30312&quot; UNION select &quot;tr-TR/TR/kategori/erkek/aksesuar/1?LastFilter=m_981&amp;m_981=30181&quot; UNION select &quot;tr-TR/TR/kategori/genc-erkek/aksesuar/1?LastFilter=m_981&amp;m_981=29123&quot; UNION select &quot;tr-TR/TR/kategori/genc-erkek/aksesuar/1?LastFilter=m_981&amp;m_981=30298&quot; UNION select &quot;tr-TR/TR/kategori/genc-erkek/aksesuar/1?LastFilter=m_981&amp;m_981=30312&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LCW.erkek" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.lcwaikiki.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">button href=&quot;(.+?)&quot; class=&quot;button</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">button href=&quot;/tr-TR/TR/urun/LC-WAIKIKI/kadin/Lastik-Toka/2701006/524884&quot; class=&quot;button
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productUrls</stringProp>
              <stringProp name="ForeachController.returnVal">productUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LCW.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.lcwaikiki.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColors</stringProp>
                  <stringProp name="RegexExtractor.regex">optionId=&quot;(.+?)&quot; alt=&quot;(.+?)&quot; title=</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">optionId=&quot;523435&quot; alt=&quot;New Black&quot; title=&quot;New Black&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSize" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSize</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;meta name=&quot;Size&quot; content=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;meta name=&quot;Size&quot; content=&quot;3XL,L,M,S,XL,XXL&quot; /&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">meta name=&quot;ProductName&quot; content=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;meta name=&quot;ProductName&quot; content=&quot;Bluz&quot; /&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;head&gt;\s+&lt;title&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;head&gt;
    &lt;title&gt;Lacivert Bluz -7YG632Z8-031 - LC Waikiki&lt;/title&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPic" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPic</stringProp>
                  <stringProp name="RegexExtractor.regex">img src=&quot;http://(.+?)/ProductImages/(.+?)&quot; alt=&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">img src=&quot;http://akcdn1.lcwaikiki.com/ProductImages/20171/2/2680035/M_20171-7Y7675Z8-E0N_A.jpg&quot; alt=&quot;&quot; title=&quot;&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPicDomain" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPicDomain</stringProp>
                  <stringProp name="RegexExtractor.regex">img src=&quot;http://(.+?)/ProductImages/(.+?)&quot; alt=&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTUREDOMAIN</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">img src=&quot;http://akcdn1.lcwaikiki.com/ProductImages/20171/2/2680035/M_20171-7Y7675Z8-E0N_A.jpg&quot; alt=&quot;&quot; title=&quot;&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrice" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrice</stringProp>
                  <stringProp name="RegexExtractor.regex">option-price-cash(.+?)&gt;(.+?) TL&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;p class=&quot;option-price-cash warn&quot;&gt;109,95 TL&lt;/p&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;LCW - Erkek&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${productSalePrice}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;LC Waikiki&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;LC Waikiki&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${productPic}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newPictureDomain =&quot;&quot; + &quot;${productPicDomain}&quot;;
vars.put(&quot;new_pictureDomain&quot;, newPictureDomain);





String newsizes =&quot;&quot; + &quot;,${productSize},${__V(productColors_1_g2)},${__V(productColors_2_g2)},${__V(productColors_3_g2)},${__V(productColors_4_g2)},${__V(productColors_5_g2)}&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/erkekSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_lcw}&quot;&gt;&lt;![CDATA[${supplierId_lcw}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.lcwaikiki.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_erkekId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_erkekId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${new_pictureDomain}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ProductImages/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/lcw/lcw_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=2 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_lcw} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LCW-COCUK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=3 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_lcw} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LCW.cocuk" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Cocuk.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;tr-TR/TR/urun-grubu/cocuk-kiz&quot; UNION select &quot;tr-TR/TR/urun-grubu/cocuk-erkek&quot; UNION select &quot;tr-TR/TR/urun-grubu/bebek-kiz&quot; UNION select &quot;tr-TR/TR/urun-grubu/bebek-erkek&quot; UNION select &quot;tr-TR/TR/kategori/kiz-cocuk/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29116&quot; UNION select &quot;tr-TR/TR/kategori/kiz-cocuk/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29144&quot; UNION select &quot;tr-TR/TR/kategori/erkek-cocuk/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29116&quot; UNION select &quot;tr-TR/TR/kategori/erkek-cocuk/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29144&quot; UNION select &quot;tr-TR/TR/kategori/kiz-bebek/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29116&quot; UNION select &quot;tr-TR/TR/kategori/kiz-bebek/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29144&quot; UNION select &quot;tr-TR/TR/kategori/erkek-bebek/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29116&quot; UNION select &quot;tr-TR/TR/kategori/erkek-bebek/ayakkabi-ve-terlik/1?LastFilter=m_981&amp;m_981=29144&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LCW.cocuk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.lcwaikiki.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">button href=&quot;(.+?)&quot; class=&quot;button</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">button href=&quot;/tr-TR/TR/urun/LC-WAIKIKI/kadin/Lastik-Toka/2701006/524884&quot; class=&quot;button
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productUrls</stringProp>
              <stringProp name="ForeachController.returnVal">productUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LCW.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.lcwaikiki.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColors</stringProp>
                  <stringProp name="RegexExtractor.regex">optionId=&quot;(.+?)&quot; alt=&quot;(.+?)&quot; title=</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">optionId=&quot;523435&quot; alt=&quot;New Black&quot; title=&quot;New Black&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSize" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSize</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;meta name=&quot;Size&quot; content=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;meta name=&quot;Size&quot; content=&quot;3XL,L,M,S,XL,XXL&quot; /&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">meta name=&quot;ProductName&quot; content=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;meta name=&quot;ProductName&quot; content=&quot;Bluz&quot; /&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;head&gt;\s+&lt;title&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;head&gt;
    &lt;title&gt;Lacivert Bluz -7YG632Z8-031 - LC Waikiki&lt;/title&gt;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPic" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPic</stringProp>
                  <stringProp name="RegexExtractor.regex">img src=&quot;http://(.+?)/ProductImages/(.+?)&quot; alt=&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">img src=&quot;http://akcdn1.lcwaikiki.com/ProductImages/20171/2/2680035/M_20171-7Y7675Z8-E0N_A.jpg&quot; alt=&quot;&quot; title=&quot;&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPicDomain" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productPicDomain</stringProp>
                  <stringProp name="RegexExtractor.regex">img src=&quot;http://(.+?)/ProductImages/(.+?)&quot; alt=&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPICTUREDOMAIN</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">img src=&quot;http://akcdn1.lcwaikiki.com/ProductImages/20171/2/2680035/M_20171-7Y7675Z8-E0N_A.jpg&quot; alt=&quot;&quot; title=&quot;&quot;</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrice" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrice</stringProp>
                  <stringProp name="RegexExtractor.regex">option-price-cash(.+?)&gt;(.+?) TL&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;p class=&quot;option-price-cash warn&quot;&gt;109,95 TL&lt;/p&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;LCW - Çocuk&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${productSalePrice}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;LC Waikiki&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;LC Waikiki&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${productPic}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newPictureDomain =&quot;&quot; + &quot;${productPicDomain}&quot;;
vars.put(&quot;new_pictureDomain&quot;, newPictureDomain);





String newsizes =&quot;&quot; + &quot;,${productSize},${__V(productColors_1_g2)},${__V(productColors_2_g2)},${__V(productColors_3_g2)},${__V(productColors_4_g2)},${__V(productColors_5_g2)}&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/cocukSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_lcw}&quot;&gt;&lt;![CDATA[${supplierId_lcw}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.lcwaikiki.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_cocukId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_cocukId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${new_pictureDomain}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ProductImages/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/lcw/lcw_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=3 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_lcw} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DEFACTO-KADIN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_defacto} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DEF.kadin" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEF.kadin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.defacto.com.tr</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/kadin</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productUrls</stringProp>
              <stringProp name="RegexExtractor.regex">;&quot; href=&quot;(.+?)&quot;&gt; &lt;figure</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOURL</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">riceRange:&apos;6&apos;, Badge:&apos;&apos; });&quot; href=&quot;/plise-etek-710629&quot;&gt; &lt;figure activeimage=&quot;0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productColors</stringProp>
              <stringProp name="RegexExtractor.regex">Variant: &apos;(.+?)&apos;, Position</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Variant: &apos;Siyah&apos;, Position:</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
              <stringProp name="RegexExtractor.regex">Name: &apos;(.+?)&apos;,Category:</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">&lt;meta name=&quot;ProductName&quot; content=&quot;Bluz&quot; /&gt;
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productTitles</stringProp>
              <stringProp name="RegexExtractor.regex">Name: &apos;(.+?)&apos;,Category:</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Name: &apos;Plise Etek&apos;,Category:
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productPics</stringProp>
              <stringProp name="RegexExtractor.regex">data-original=&quot;\/\/dfcdn.defacto.com.tr(.+?)&quot; onerror</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">data-original=&quot;//dfcdn.defacto.com.tr/2/H3228AZ_17SP_BK27_01_01.jpg&quot; onerror</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
              <stringProp name="RegexExtractor.regex">SalePrice:&apos;(.+?) TL&apos;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Gender:&apos;Kadın&apos;,SalePrice:&apos;59.99 TL&apos;,D</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
            <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
            <stringProp name="ForeachController.inputVal">productUrls</stringProp>
            <stringProp name="ForeachController.returnVal">productUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
              <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEF.urunDetay" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.defacto.com.tr</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${new_url}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">variant=&quot;(.+?)&quot; guid=&quot;(.+?)&quot;&gt;&lt;span&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$3$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">variant=&quot;450608&quot; guid=&quot;86fed67d-1340-4fe6-b2a7-21e0ad7f1a9a&quot;&gt;&lt;span&gt;XS&lt;/span&gt;&lt;/a&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Defacto - Kadın&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;Defacto&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Defacto&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);

String newTitle =&quot;&quot; + &quot;${__V(productTitles_${counter_price}_g1)}&quot;;
vars.put(&quot;productTitle&quot;, newTitle);


String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;,${__V(productSizes_1_g3)},${__V(productSizes_2_g3)},${__V(productSizes_3_g3)},${__V(productSizes_4_g3)},${__V(productSizes_5_g3)},${__V(productSizes_6_g3)},${__V(productSizes_7_g3)},${__V(productColors_${counter_price}_g1)},&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCategory</stringProp>
              <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultBrand</stringProp>
              <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCampaign</stringProp>
              <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultMagaza</stringProp>
              <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">4</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_defacto}&quot;&gt;&lt;![CDATA[${supplierId_defacto}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.defacto.com.tr${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/products</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productId</stringProp>
                <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn))

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">productSizeIds</stringProp>
              <stringProp name="variableNames">productSizeIds</stringProp>
            </JDBCSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
              <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
              <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">dfcdn.defacto.com.tr</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${new_picture}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">${__property(user.dir)}/images/defacto/defacto_${productId}_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <stringProp name="FileSaver.variablename">testimagefile</stringProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${testimagefile}</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype"></stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_defacto} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DEFACTO-ERKEK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=2 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_defacto} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DEF.erkek" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEF.erkek" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.defacto.com.tr</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/erkek</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productUrls</stringProp>
              <stringProp name="RegexExtractor.regex">;&quot; href=&quot;(.+?)&quot;&gt; &lt;figure</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOURL</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">riceRange:&apos;6&apos;, Badge:&apos;&apos; });&quot; href=&quot;/plise-etek-710629&quot;&gt; &lt;figure activeimage=&quot;0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productColors</stringProp>
              <stringProp name="RegexExtractor.regex">Variant: &apos;(.+?)&apos;, Position</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Variant: &apos;Siyah&apos;, Position:</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
              <stringProp name="RegexExtractor.regex">Name: &apos;(.+?)&apos;,Category:</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">&lt;meta name=&quot;ProductName&quot; content=&quot;Bluz&quot; /&gt;
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productTitles</stringProp>
              <stringProp name="RegexExtractor.regex">Name: &apos;(.+?)&apos;,Category:</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Name: &apos;Plise Etek&apos;,Category:
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productPics</stringProp>
              <stringProp name="RegexExtractor.regex">data-original=&quot;\/\/dfcdn.defacto.com.tr(.+?)&quot; onerror</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">data-original=&quot;//dfcdn.defacto.com.tr/2/H3228AZ_17SP_BK27_01_01.jpg&quot; onerror</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
              <stringProp name="RegexExtractor.regex">SalePrice:&apos;(.+?) TL&apos;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Gender:&apos;Kadın&apos;,SalePrice:&apos;59.99 TL&apos;,D</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
            <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
            <stringProp name="ForeachController.inputVal">productUrls</stringProp>
            <stringProp name="ForeachController.returnVal">productUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
              <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEF.urunDetay" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.defacto.com.tr</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${new_url}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">variant=&quot;(.+?)&quot; guid=&quot;(.+?)&quot;&gt;&lt;span&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$3$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">variant=&quot;450608&quot; guid=&quot;86fed67d-1340-4fe6-b2a7-21e0ad7f1a9a&quot;&gt;&lt;span&gt;XS&lt;/span&gt;&lt;/a&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Defacto - Erkek&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;Defacto&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Defacto&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);

String newTitle =&quot;&quot; + &quot;${__V(productTitles_${counter_price}_g1)}&quot;;
vars.put(&quot;productTitle&quot;, newTitle);


String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;,${__V(productSizes_1_g3)},${__V(productSizes_2_g3)},${__V(productSizes_3_g3)},${__V(productSizes_4_g3)},${__V(productSizes_5_g3)},${__V(productSizes_6_g3)},${__V(productSizes_7_g3)},${__V(productColors_${counter_price}_g1)},&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCategory</stringProp>
              <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultBrand</stringProp>
              <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCampaign</stringProp>
              <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultMagaza</stringProp>
              <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">4</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/erkekSubcategorySetter.bsh</stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_defacto}&quot;&gt;&lt;![CDATA[${supplierId_defacto}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.defacto.com.tr${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_erkekId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_erkekId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/products</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productId</stringProp>
                <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn))

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">productSizeIds</stringProp>
              <stringProp name="variableNames">productSizeIds</stringProp>
            </JDBCSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
              <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
              <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">dfcdn.defacto.com.tr</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${new_picture}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">${__property(user.dir)}/images/defacto/defacto_${productId}_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <stringProp name="FileSaver.variablename">testimagefile</stringProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${testimagefile}</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype"></stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=2 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_defacto} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DEFACTO-COCUK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=3 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_defacto} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DEF.cocuk" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEF.cocuk" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.defacto.com.tr</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cocuk</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productUrls</stringProp>
              <stringProp name="RegexExtractor.regex">;&quot; href=&quot;(.+?)&quot;&gt; &lt;figure</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOURL</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">riceRange:&apos;6&apos;, Badge:&apos;&apos; });&quot; href=&quot;/plise-etek-710629&quot;&gt; &lt;figure activeimage=&quot;0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productColors</stringProp>
              <stringProp name="RegexExtractor.regex">Variant: &apos;(.+?)&apos;, Position</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Variant: &apos;Siyah&apos;, Position:</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryNames" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productCategoryNames</stringProp>
              <stringProp name="RegexExtractor.regex">Name: &apos;(.+?)&apos;,Category:</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">&lt;meta name=&quot;ProductName&quot; content=&quot;Bluz&quot; /&gt;
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitles" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">productTitles</stringProp>
              <stringProp name="RegexExtractor.regex">Name: &apos;(.+?)&apos;,Category:</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Name: &apos;Plise Etek&apos;,Category:
</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productPics</stringProp>
              <stringProp name="RegexExtractor.regex">data-original=&quot;\/\/dfcdn.defacto.com.tr(.+?)&quot; onerror</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">data-original=&quot;//dfcdn.defacto.com.tr/2/H3228AZ_17SP_BK27_01_01.jpg&quot; onerror</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrices" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productSalePrices</stringProp>
              <stringProp name="RegexExtractor.regex">SalePrice:&apos;(.+?) TL&apos;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Gender:&apos;Kadın&apos;,SalePrice:&apos;59.99 TL&apos;,D</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
            <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
            <stringProp name="ForeachController.inputVal">productUrls</stringProp>
            <stringProp name="ForeachController.returnVal">productUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
              <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEF.urunDetay" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.defacto.com.tr</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${new_url}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                <stringProp name="RegexExtractor.regex">variant=&quot;(.+?)&quot; guid=&quot;(.+?)&quot;&gt;&lt;span&gt;(.+?)&lt;</stringProp>
                <stringProp name="RegexExtractor.template">$3$</stringProp>
                <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">variant=&quot;450608&quot; guid=&quot;86fed67d-1340-4fe6-b2a7-21e0ad7f1a9a&quot;&gt;&lt;span&gt;XS&lt;/span&gt;&lt;/a&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Defacto - Çocuk&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${__V(productSalePrices_${counter_price}_g1)}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;Defacto&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Defacto&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${__V(productCategoryNames_${counter_price}_g1)}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);

String newTitle =&quot;&quot; + &quot;${__V(productTitles_${counter_price}_g1)}&quot;;
vars.put(&quot;productTitle&quot;, newTitle);


String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;,${__V(productSizes_1_g3)},${__V(productSizes_2_g3)},${__V(productSizes_3_g3)},${__V(productSizes_4_g3)},${__V(productSizes_5_g3)},${__V(productSizes_6_g3)},${__V(productSizes_7_g3)},${__V(productColors_${counter_price}_g1)},&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCategory</stringProp>
              <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultBrand</stringProp>
              <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultCampaign</stringProp>
              <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">resultMagaza</stringProp>
              <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">4</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
              <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/cocukSubcategorySetter.bsh</stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_defacto}&quot;&gt;&lt;![CDATA[${supplierId_defacto}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.defacto.com.tr${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_cocukId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_cocukId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/products</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productId</stringProp>
                <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn))

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">productSizeIds</stringProp>
              <stringProp name="variableNames">productSizeIds</stringProp>
            </JDBCSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
              <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
              <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">dfcdn.defacto.com.tr</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${new_picture}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">${__property(user.dir)}/images/defacto/defacto_${productId}_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <stringProp name="FileSaver.variablename">testimagefile</stringProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${testimagefile}</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype"></stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=3 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_defacto} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HEPSIB-KADIN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hepsiburada} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HB.kadin" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Kadin.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;bayan-giyim-urunleri-c-60004640&quot; UNION select &quot;ic-giyim-urunleri-c-60001585&quot; UNION select &quot;bayan-ayakkabilar-c-60000116&quot; UNION select &quot;bayan-cantalari-c-60000163&quot; UNION select &quot;bayan-aksesuarlar-c-60001127&quot; UNION select &quot;tesettur-giyim-c-60006034&quot; UNION select &quot;buyuk-beden-c-12087217&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller CAT" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HB.kadin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.hepsiburada.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">box product no-hover&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot; data-bind</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;div class=&quot;box product no-hover&quot;&gt;
        &lt;a href=&quot;/melisita-rossi-buyuk-beden-elbise-p-HBV000002E8HW&quot; data-bind=&quot;click: clickHandler.bind($data)&quot; data-rrclickurl=
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">img width=&quot;413&quot; height=&quot;413&quot; src=&apos;http:\/\/images.hepsiburada.net\/(.+?)&apos; </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  &lt;img width=&quot;413&quot; height=&quot;413&quot; src=&apos;http://images.hepsiburada.net/assets/Hediyelik/300-443/9541674795058.jpg&apos; data-s</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;link rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/bayan-giyim-urunleri-c-60004640?sayfa=3&quot; /&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productUrls</stringProp>
              <stringProp name="ForeachController.returnVal">productUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HB.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.hepsiburada.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColors</stringProp>
                  <stringProp name="RegexExtractor.regex">name=&quot;Renk&quot;\s+value=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTCOLOR</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">name=&quot;Renk&quot;
                   value=&quot;Mavi&quot; /&gt;
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">name=&quot;Beden&quot;\s+value=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">name=&quot;Beden&quot;
                                       value=&quot;34&quot; /&gt;

</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">productName&apos;&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOCAT</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;categoryId&quot;:&quot;60000715&quot;,&quot;categoryName&quot;:&quot;Gömlek&quot;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">productName&apos;&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrice" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrice</stringProp>
                  <stringProp name="RegexExtractor.regex">offering-price&quot; content=(.+?)&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;offering-price&quot; content=14.90&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Hepsiburada - Kadın&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${productSalePrice}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;Hepsiburada&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Hepsiburada&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;,${__V(productColors_1_g1)},${__V(productColors_2_g1)},${__V(productColors_3_g1)},${__V(productColors_4_g1)},${__V(productColors_5_g1)},${__V(productColors_6_g1)},${__V(productSizes_1_g1)},${__V(productSizes_2_g1)},${__V(productSizes_3_g1)},${__V(productSizes_4_g1)},${__V(productSizes_5_g1)},${__V(productSizes_6_g1)},${__V(productSizes_7_g1)},${__V(productSizes_8_g1)},&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_hepsiburada}&quot;&gt;&lt;![CDATA[${supplierId_hepsiburada}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.hepsiburada.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 13) as onuc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 14) as ondort))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">images.hepsiburada.net</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/hepsiburada/hb_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hepsiburada} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HEPSIB-ERKEK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=2 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hepsiburada} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HB.erkek" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Erkek.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;erkek-giyim-urunleri-c-60004641&quot; UNION select &quot;erkek-ic-giyim-urunleri-c-60001586&quot; UNION select &quot;ayakkabi-c-60000117&quot; UNION select &quot;erkek-aksesuarlari-c-60001104&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller CAT" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HB.erkek" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.hepsiburada.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">box product no-hover&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot; data-bind</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;div class=&quot;box product no-hover&quot;&gt;
        &lt;a href=&quot;/melisita-rossi-buyuk-beden-elbise-p-HBV000002E8HW&quot; data-bind=&quot;click: clickHandler.bind($data)&quot; data-rrclickurl=
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">img width=&quot;413&quot; height=&quot;413&quot; src=&apos;http:\/\/images.hepsiburada.net\/(.+?)&apos; </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  &lt;img width=&quot;413&quot; height=&quot;413&quot; src=&apos;http://images.hepsiburada.net/assets/Hediyelik/300-443/9541674795058.jpg&apos; data-s</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;link rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/bayan-giyim-urunleri-c-60004640?sayfa=3&quot; /&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productUrls</stringProp>
              <stringProp name="ForeachController.returnVal">productUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HB.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.hepsiburada.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColors</stringProp>
                  <stringProp name="RegexExtractor.regex">name=&quot;Renk&quot;\s+value=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTCOLOR</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">name=&quot;Renk&quot;
                   value=&quot;Mavi&quot; /&gt;
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">name=&quot;Beden&quot;\s+value=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">name=&quot;Beden&quot;
                                       value=&quot;34&quot; /&gt;

</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">productName&apos;&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOCAT</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;categoryId&quot;:&quot;60000715&quot;,&quot;categoryName&quot;:&quot;Gömlek&quot;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">productName&apos;&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrice" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrice</stringProp>
                  <stringProp name="RegexExtractor.regex">offering-price&quot; content=(.+?)&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;offering-price&quot; content=14.90&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Hepsiburada - Erkek&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${productSalePrice}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;Hepsiburada&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Hepsiburada&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;,${__V(productColors_1_g1)},${__V(productColors_2_g1)},${__V(productColors_3_g1)},${__V(productColors_4_g1)},${__V(productColors_5_g1)},${__V(productColors_6_g1)},${__V(productSizes_1_g1)},${__V(productSizes_2_g1)},${__V(productSizes_3_g1)},${__V(productSizes_4_g1)},${__V(productSizes_5_g1)},${__V(productSizes_6_g1)},${__V(productSizes_7_g1)},${__V(productSizes_8_g1)},&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/erkekSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_hepsiburada}&quot;&gt;&lt;![CDATA[${supplierId_hepsiburada}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.hepsiburada.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_erkekId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_erkekId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 13) as onuc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 14) as ondort))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">images.hepsiburada.net</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/hepsiburada/hb_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=2 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hepsiburada} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HEPSIB-COCUK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=3 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hepsiburada} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HB.cocuk" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Cocuk.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;kiz-cocuk-c-205474&quot; UNION select &quot;erkek-cocuk-c-205454&quot; UNION select &quot;bebek-kiyafetleri-giyim-c-60007347&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller CAT" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HB.cocuk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.hepsiburada.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">box product no-hover&quot;&gt;\s+&lt;a href=&quot;(.+?)&quot; data-bind</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;div class=&quot;box product no-hover&quot;&gt;
        &lt;a href=&quot;/melisita-rossi-buyuk-beden-elbise-p-HBV000002E8HW&quot; data-bind=&quot;click: clickHandler.bind($data)&quot; data-rrclickurl=
</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">img width=&quot;413&quot; height=&quot;413&quot; src=&apos;http:\/\/images.hepsiburada.net\/(.+?)&apos; </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">  &lt;img width=&quot;413&quot; height=&quot;413&quot; src=&apos;http://images.hepsiburada.net/assets/Hediyelik/300-443/9541674795058.jpg&apos; data-s</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;link rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/bayan-giyim-urunleri-c-60004640?sayfa=3&quot; /&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productUrls</stringProp>
              <stringProp name="ForeachController.returnVal">productUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HB.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.hepsiburada.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productColors</stringProp>
                  <stringProp name="RegexExtractor.regex">name=&quot;Renk&quot;\s+value=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTCOLOR</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">name=&quot;Renk&quot;
                   value=&quot;Mavi&quot; /&gt;
</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizes" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizes</stringProp>
                  <stringProp name="RegexExtractor.regex">name=&quot;Beden&quot;\s+value=&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">name=&quot;Beden&quot;
                                       value=&quot;34&quot; /&gt;

</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">productName&apos;&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOCAT</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;categoryId&quot;:&quot;60000715&quot;,&quot;categoryName&quot;:&quot;Gömlek&quot;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">productName&apos;&quot;&gt;(.+?)&lt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrice" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrice</stringProp>
                  <stringProp name="RegexExtractor.regex">offering-price&quot; content=(.+?)&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;offering-price&quot; content=14.90&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;Hepsiburada - Çocuk&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${productSalePrice}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;Hepsiburada&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;Hepsiburada&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g1)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);


String newsizes =&quot;&quot; + &quot;,${__V(productColors_1_g1)},${__V(productColors_2_g1)},${__V(productColors_3_g1)},${__V(productColors_4_g1)},${__V(productColors_5_g1)},${__V(productColors_6_g1)},${__V(productSizes_1_g1)},${__V(productSizes_2_g1)},${__V(productSizes_3_g1)},${__V(productSizes_4_g1)},${__V(productSizes_5_g1)},${__V(productSizes_6_g1)},${__V(productSizes_7_g1)},${__V(productSizes_8_g1)},&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/cocukSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_hepsiburada}&quot;&gt;&lt;![CDATA[${supplierId_hepsiburada}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.hepsiburada.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_cocukId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_cocukId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 13) as onuc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;,&apos;, 14) as ondort))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">images.hepsiburada.net</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/hepsiburada/hb_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=3 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_hepsiburada} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="N11-KADIN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=1 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_n11} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="N11.kadin" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Kadin.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;ayakkabi-ve-canta/kadin-ayakkabi?srt=REVIEWS&quot; UNION select &quot;ayakkabi-ve-canta/kadin-canta?srt=REVIEWS&quot; UNION select &quot;kadin-giyim-aksesuar?srt=REVIEWS&quot; UNION select &quot;gunes-gozlugu/kadin-gunes-gozlugu?srt=REVIEWS&quot; UNION select &quot;gunes-gozlugu/unisex-gunes-gozluk?srt=REVIEWS&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller CAT" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="N11.kadin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.n11.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a href=&quot;http:\/\/urun.n11.com\/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;a href=&quot;http://urun.n11.com/gunluk-ayakkabi/jevel-bayan-gunluk-babet-ayakkabi-P33358878&quot; title=&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">meta itemprop=&quot;image&quot; content=&quot;(.+?).n11.com.tr\/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">meta itemprop=&quot;image&quot; content=&quot;http://cdn1.n11.com.tr/a1/217/01/72/60/82/00114177.jpg&quot;/&gt;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPicDomains" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPicDomains</stringProp>
                <stringProp name="RegexExtractor.regex">meta itemprop=&quot;image&quot; content=&quot;http:\/\/(.+?).n11.com.tr\/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">meta itemprop=&quot;image&quot; content=&quot;http://cdn1.n11.com.tr/a1/217/01/72/60/82/00114177.jpg&quot;/&gt;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;link rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/bayan-giyim-urunleri-c-60004640?sayfa=3&quot; /&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productUrls</stringProp>
              <stringProp name="ForeachController.returnVal">productUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="N11.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">urun.n11.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizesColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizesColors</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;hash&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;hash&quot;:&quot;36|Siyah&quot;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">meta content=&quot;(.+?)&quot; itemprop=&quot;caption&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOCAT</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;categoryId&quot;:&quot;60000715&quot;,&quot;categoryName&quot;:&quot;Gömlek&quot;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">meta content=&quot;(.+?)&quot; itemprop=&quot;caption&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments"> &lt;meta content=&quot;Massage Silikon Topuk Terlik - Topuk Dikeni İçin Özel Terlik&quot; itemprop=&quot;caption&quot;&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrice" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrice</stringProp>
                  <stringProp name="RegexExtractor.regex">,&quot;pDiscountedPrice&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">,&quot;pDiscountedPrice&quot;:&quot;23.90&quot;,</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;N11 - Kadın&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${productSalePrice}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;N11&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;N11&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g2)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newPictureDomain =&quot;&quot; + &quot;${__V(productPicDomains_${counter_price}_g1)}&quot;;
vars.put(&quot;new_pictureDomain&quot;, newPictureDomain);


String newsizes =&quot;&quot; + &quot;|${__V(productSizesColors_1_g1)}|${__V(productSizesColors_2_g1)}|${__V(productSizesColors_3_g1)}|${__V(productSizesColors_4_g1)}|${__V(productSizesColors_5_g1)}|${__V(productSizesColors_6_g1)}|${__V(productSizesColors_7_g1)}|${__V(productSizesColors_8_g1)}|${__V(productSizesColors_9_g1)}|${__V(productSizesColors_10_g1)}|${__V(productSizesColors_11_g1)}|${__V(productSizesColors_12_g1)}|${__V(productSizesColors_13_g1)}|${__V(productSizesColors_14_g1)}|${__V(productSizesColors_15_g1)}|${__V(productSizesColors_16_g1)}|${__V(productSizesColors_17_g1)}|${__V(productSizesColors_18_g1)}|${__V(productSizesColors_19_g1)}|${__V(productSizesColors_20_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

String replacedSizes = vars.get(&quot;new_sizes&quot;);
String path_replaced = replacedSizes.replaceAll(&quot;-&quot;, &quot;|&quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_n11}&quot;&gt;&lt;![CDATA[${supplierId_n11}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.n11.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_kadinId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_kadinId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 13) as onuc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 14) as ondort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 15) as onbes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 16) as onalti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 17) as onyedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 18) as onsekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 19) as ondokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 20) as yirmi))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${new_pictureDomain}.n11.com.tr</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/n11/n11_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=1 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_n11} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_kadinId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="N11-ERKEK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=2 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_n11} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="N11.erkek" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Erkek.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;ayakkabi-ve-canta/erkek-ayakkabi?srt=REVIEWS&quot; UNION select &quot;ayakkabi-ve-canta/erkek-canta&quot; UNION select &quot;erkek-giyim-aksesuar&quot; UNION select &quot;gunes-gozlugu/erkek-gunes-gozlugu&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller CAT" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="N11.erkek" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.n11.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a href=&quot;http:\/\/urun.n11.com\/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;a href=&quot;http://urun.n11.com/gunluk-ayakkabi/jevel-bayan-gunluk-babet-ayakkabi-P33358878&quot; title=&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">meta itemprop=&quot;image&quot; content=&quot;(.+?).n11.com.tr\/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">meta itemprop=&quot;image&quot; content=&quot;http://cdn1.n11.com.tr/a1/217/01/72/60/82/00114177.jpg&quot;/&gt;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPicDomains" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPicDomains</stringProp>
                <stringProp name="RegexExtractor.regex">meta itemprop=&quot;image&quot; content=&quot;http:\/\/(.+?).n11.com.tr\/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">meta itemprop=&quot;image&quot; content=&quot;http://cdn1.n11.com.tr/a1/217/01/72/60/82/00114177.jpg&quot;/&gt;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;link rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/bayan-giyim-urunleri-c-60004640?sayfa=3&quot; /&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productUrls</stringProp>
              <stringProp name="ForeachController.returnVal">productUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="N11.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">urun.n11.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizesColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizesColors</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;hash&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;hash&quot;:&quot;36|Siyah&quot;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">meta content=&quot;(.+?)&quot; itemprop=&quot;caption&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOCAT</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;categoryId&quot;:&quot;60000715&quot;,&quot;categoryName&quot;:&quot;Gömlek&quot;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">meta content=&quot;(.+?)&quot; itemprop=&quot;caption&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments"> &lt;meta content=&quot;Massage Silikon Topuk Terlik - Topuk Dikeni İçin Özel Terlik&quot; itemprop=&quot;caption&quot;&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrice" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrice</stringProp>
                  <stringProp name="RegexExtractor.regex">,&quot;pDiscountedPrice&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">,&quot;pDiscountedPrice&quot;:&quot;23.90&quot;,</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;N11 - Erkek&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${productSalePrice}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;N11&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;N11&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g2)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newPictureDomain =&quot;&quot; + &quot;${__V(productPicDomains_${counter_price}_g1)}&quot;;
vars.put(&quot;new_pictureDomain&quot;, newPictureDomain);


String newsizes =&quot;&quot; + &quot;|${__V(productSizesColors_1_g1)}|${__V(productSizesColors_2_g1)}|${__V(productSizesColors_3_g1)}|${__V(productSizesColors_4_g1)}|${__V(productSizesColors_5_g1)}|${__V(productSizesColors_6_g1)}|${__V(productSizesColors_7_g1)}|${__V(productSizesColors_8_g1)}|${__V(productSizesColors_9_g1)}|${__V(productSizesColors_10_g1)}|${__V(productSizesColors_11_g1)}|${__V(productSizesColors_12_g1)}|${__V(productSizesColors_13_g1)}|${__V(productSizesColors_14_g1)}|${__V(productSizesColors_15_g1)}|${__V(productSizesColors_16_g1)}|${__V(productSizesColors_17_g1)}|${__V(productSizesColors_18_g1)}|${__V(productSizesColors_19_g1)}|${__V(productSizesColors_20_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

String replacedSizes = vars.get(&quot;new_sizes&quot;);
String path_replaced = replacedSizes.replaceAll(&quot;-&quot;, &quot;|&quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/erkekSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_n11}&quot;&gt;&lt;![CDATA[${supplierId_n11}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.n11.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_erkekId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_erkekId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 13) as onuc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 14) as ondort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 15) as onbes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 16) as onalti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 17) as onyedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 18) as onsekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 19) as ondokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 20) as yirmi))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${new_pictureDomain}.n11.com.tr</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/n11/n11_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=2 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_n11} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_erkekId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="N11-COCUK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Mark Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.MARK" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET pack_stock_type=3 WHERE active=1 AND pack_stock_type=0 AND 
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_n11} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="N11.cocuk" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.Cocuk.catUrls" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">select  &quot;ayakkabi-ve-canta/cocuk-ayakkabi?srt=REVIEWS&quot; UNION select &quot;cocuk-giyim-aksesuar?srt=REVIEWS&quot; UNION select &quot;gunes-gozlugu/cocuk-gunes-gozlugu?srt=REVIEWS&quot;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">catUrls</stringProp>
            <stringProp name="variableNames">catUrls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller CAT" enabled="true">
            <stringProp name="ForeachController.inputVal">catUrls</stringProp>
            <stringProp name="ForeachController.returnVal">catUrl</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="N11.cocuk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.n11.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${catUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productUrls</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a href=&quot;http:\/\/urun.n11.com\/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOURL</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;a href=&quot;http://urun.n11.com/gunluk-ayakkabi/jevel-bayan-gunluk-babet-ayakkabi-P33358878&quot; title=&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPics" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPics</stringProp>
                <stringProp name="RegexExtractor.regex">meta itemprop=&quot;image&quot; content=&quot;(.+?).n11.com.tr\/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">meta itemprop=&quot;image&quot; content=&quot;http://cdn1.n11.com.tr/a1/217/01/72/60/82/00114177.jpg&quot;/&gt;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productPicDomains" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productPicDomains</stringProp>
                <stringProp name="RegexExtractor.regex">meta itemprop=&quot;image&quot; content=&quot;http:\/\/(.+?).n11.com.tr\/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPICTURE</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">meta itemprop=&quot;image&quot; content=&quot;http://cdn1.n11.com.tr/a1/217/01/72/60/82/00114177.jpg&quot;/&gt;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pagingUrls" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pagingUrls</stringProp>
                <stringProp name="RegexExtractor.regex">rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOPAGING</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;link rel=&quot;next&quot; href=&quot;http://www.hepsiburada.com/bayan-giyim-urunleri-c-60004640?sayfa=3&quot; /&gt;
</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterCampaign" enabled="true">
              <stringProp name="BeanShellSampler.query">String x1 = &quot;1&quot;;
int y1 = Integer.parseInt(x1);

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String x2 = &quot;1&quot;;
int y2 = Integer.parseInt(x2);

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (ÜRÜN)" enabled="true">
              <stringProp name="ForeachController.inputVal">productUrls</stringProp>
              <stringProp name="ForeachController.returnVal">productUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.url" enabled="true">
                <stringProp name="BeanShellSampler.query">String x2 = vars.get(&quot;counter_url&quot;);

int y2 = Integer.parseInt(x2);
y2 = y2 + 1;

String z2 = &quot;&quot; + y2;
vars.put(&quot;counter_url&quot;, z2);


String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_url}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="N11.urunDetay" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">urun.n11.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${new_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://www.boyner.com.tr/api/attributeselection/575263</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSizesColors" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSizesColors</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;hash&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOPRODUCTSIZE</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;hash&quot;:&quot;36|Siyah&quot;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCategoryName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productCategoryName</stringProp>
                  <stringProp name="RegexExtractor.regex">meta content=&quot;(.+?)&quot; itemprop=&quot;caption&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOCAT</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&quot;categoryId&quot;:&quot;60000715&quot;,&quot;categoryName&quot;:&quot;Gömlek&quot;
</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productTitle" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productTitle</stringProp>
                  <stringProp name="RegexExtractor.regex">meta content=&quot;(.+?)&quot; itemprop=&quot;caption&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments"> &lt;meta content=&quot;Massage Silikon Topuk Terlik - Topuk Dikeni İçin Özel Terlik&quot; itemprop=&quot;caption&quot;&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productSalePrice" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">productSalePrice</stringProp>
                  <stringProp name="RegexExtractor.regex">,&quot;pDiscountedPrice&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOSALEPRICE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">,&quot;pDiscountedPrice&quot;:&quot;23.90&quot;,</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterProduct" enabled="true">
                <stringProp name="BeanShellSampler.query">String x1 = vars.get(&quot;counter_price&quot;);

int y1 = Integer.parseInt(x1);
y1 = y1 + 1;

String z1 = &quot;&quot; + y1;
vars.put(&quot;counter_price&quot;, z1);

String newCampaignName =&quot;&quot; + &quot;N11 - Çocuk&quot;;
vars.put(&quot;new_campaignName&quot;, newCampaignName);

String newprice = &quot;&quot; + &quot;${productSalePrice}&quot;;
String path_replaced = newprice.replaceAll(&quot;,&quot;, &quot;.&quot;);
vars.put(&quot;new_price&quot;, path_replaced);

String newurl =&quot;&quot; + &quot;${__V(productUrls_${counter_price}_g1)}&quot;;
vars.put(&quot;new_url&quot;, newurl);

String newBrand =&quot;&quot; + &quot;N11&quot;;
vars.put(&quot;new_brand&quot;, newBrand);

String newManufacturer =&quot;&quot; + &quot;N11&quot;;
vars.put(&quot;new_magaza&quot;, newManufacturer);

String newCategory =&quot;&quot; + &quot;${productCategoryName}&quot;;
String cat_replaced = newCategory.replaceAll(&quot;&apos;&quot;, &quot; &quot;);



String newPicture =&quot;&quot; + &quot;${__V(productPics_${counter_price}_g2)}&quot;;
vars.put(&quot;new_picture&quot;, newPicture);

String newPictureDomain =&quot;&quot; + &quot;${__V(productPicDomains_${counter_price}_g1)}&quot;;
vars.put(&quot;new_pictureDomain&quot;, newPictureDomain);


String newsizes =&quot;&quot; + &quot;|${__V(productSizesColors_1_g1)}|${__V(productSizesColors_2_g1)}|${__V(productSizesColors_3_g1)}|${__V(productSizesColors_4_g1)}|${__V(productSizesColors_5_g1)}|${__V(productSizesColors_6_g1)}|${__V(productSizesColors_7_g1)}|${__V(productSizesColors_8_g1)}|${__V(productSizesColors_9_g1)}|${__V(productSizesColors_10_g1)}|${__V(productSizesColors_11_g1)}|${__V(productSizesColors_12_g1)}|${__V(productSizesColors_13_g1)}|${__V(productSizesColors_14_g1)}|${__V(productSizesColors_15_g1)}|${__V(productSizesColors_16_g1)}|${__V(productSizesColors_17_g1)}|${__V(productSizesColors_18_g1)}|${__V(productSizesColors_19_g1)}|${__V(productSizesColors_20_g1)}|&quot;;
vars.put(&quot;new_sizes&quot;, newsizes);

String replacedSizes = vars.get(&quot;new_sizes&quot;);
String path_replaced = replacedSizes.replaceAll(&quot;-&quot;, &quot;|&quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);

/*path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_0&quot;, &quot;TÜKENDİ - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
path_replaced = vars.get(&quot;new_sizes&quot;).replaceAll(&quot;_1&quot;, &quot;MEVCUT - &quot;);
vars.put(&quot;new_sizes&quot;, path_replaced);
*/
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kategori" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT IFNULL(MIN(id_feature_value), &apos;${kategori_digerid}&apos;)  id_feature_value, IFNULL(MIN(value), &apos;Diğer&apos;) value
FROM psmd_feature_value_lang
WHERE id_lang =2 AND value IN (
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 1) as first),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 2) as second),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 3) as third),
(SELECT SPLIT_STR(&apos;${new_category}&apos;, &apos; &apos;, 4) as fourth)
)
AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
)
ORDER BY 1 DESC 
LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCategory</stringProp>
                <stringProp name="variableNames">featureValueId_category,featureValueName_category</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Marka" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_brand}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultBrand</stringProp>
                <stringProp name="variableNames">featureValueId_brand,featureValueName_brand</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Kampanya" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_campaignName}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_campaignId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultCampaign</stringProp>
                <stringProp name="variableNames">featureValueId_campaign,featureValueName_campaign</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-Magaza" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">SELECT id_feature_value,value FROM psmd_feature_value_lang WHERE id_lang =2 AND value = &quot;${new_magaza}&quot; AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_magazaId}
) ORDER BY 1 DESC LIMIT 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">resultMagaza</stringProp>
                <stringProp name="variableNames">featureValueId_magaza,featureValueName_magaza</stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.attributes. SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query">
String a1 = vars.get(&quot;featureValueId_brand_1&quot;);
String a2 = vars.get(&quot;featureValueId_campaign_1&quot;);
String a3 = vars.get(&quot;featureValueId_category_1&quot;);
String a4 = vars.get(&quot;featureValueId_magaza_1&quot;);
String a5 = vars.get(&quot;featureValueName_brand_1&quot;);



vars.put(&quot;featureValueId_brand&quot;, a1);
vars.put(&quot;featureValueId_campaign&quot;, a2);
vars.put(&quot;featureValueId_category&quot;, a3);
vars.put(&quot;featureValueId_magaza&quot;, a4);
vars.put(&quot;featureValueName_brand&quot;, a5);


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Marka" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_brand_1}&quot; != &quot;${new_brand}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-marka" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueName_brand" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueName_brand</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Kampanya" enabled="true">
                <stringProp name="IfController.condition">&quot;${featureValueName_campaign_1}&quot; != &quot;${new_campaignName}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kampanya" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_campaignName}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_campaign" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_campaign</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Magaza" enabled="false">
                <stringProp name="IfController.condition">&quot;${featureValueName_magaza_1}&quot; != &quot;${new_magaza}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-magaza" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_magaza}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_magaza" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_magaza</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOMAGAZA</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.SubCat.SETTER" enabled="true">
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename">${__property(user.dir)}/Scripts/kadinSubcategorySetter.bsh</stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products INSERT NEW" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product&gt;&#xd;
	&lt;id_manufacturer&gt;&lt;/id_manufacturer&gt;&#xd;
	&lt;id_supplier xlink:href=&quot;http://www.oolur.com/api/suppliers/${supplierId_n11}&quot;&gt;&lt;![CDATA[${supplierId_n11}]]&gt;&lt;/id_supplier&gt;&#xd;
	&lt;id_category_default&gt;&lt;/id_category_default&gt;&#xd;
	&lt;new&gt;&lt;/new&gt;&#xd;
	&lt;cache_default_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/cache_default_attribute&gt;&#xd;
	&lt;id_default_image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot; notFilterable=&quot;true&quot;&gt;&lt;![CDATA[455]]&gt;&lt;/id_default_image&gt;&#xd;
	&lt;id_default_combination notFilterable=&quot;true&quot;&gt;&lt;/id_default_combination&gt;&#xd;
	&lt;id_tax_rules_group&gt;&lt;![CDATA[0]]&gt;&lt;/id_tax_rules_group&gt;&#xd;
	&lt;position_in_category notFilterable=&quot;true&quot;&gt;&lt;![CDATA[0]]&gt;&lt;/position_in_category&gt;&#xd;
	&lt;type notFilterable=&quot;true&quot;&gt;&lt;![CDATA[simple]]&gt;&lt;/type&gt;&#xd;
	&lt;id_shop_default&gt;&lt;![CDATA[1]]&gt;&lt;/id_shop_default&gt;&#xd;
	&lt;reference&gt;&lt;/reference&gt;&#xd;
	&lt;supplier_reference&gt;&lt;/supplier_reference&gt;&#xd;
	&lt;location&gt;&lt;/location&gt;&#xd;
	&lt;width&gt;&lt;![CDATA[0.000000]]&gt;&lt;/width&gt;&#xd;
	&lt;height&gt;&lt;![CDATA[0.000000]]&gt;&lt;/height&gt;&#xd;
	&lt;depth&gt;&lt;![CDATA[0.000000]]&gt;&lt;/depth&gt;&#xd;
	&lt;weight&gt;&lt;![CDATA[0.000000]]&gt;&lt;/weight&gt;&#xd;
	&lt;quantity_discount&gt;&lt;![CDATA[0]]&gt;&lt;/quantity_discount&gt;&#xd;
	&lt;ean13&gt;&lt;/ean13&gt;&#xd;
	&lt;isbn&gt;&lt;/isbn&gt;&#xd;
	&lt;upc&gt;&lt;/upc&gt;&#xd;
	&lt;cache_is_pack&gt;&lt;![CDATA[0]]&gt;&lt;/cache_is_pack&gt;&#xd;
	&lt;cache_has_attachments&gt;&lt;![CDATA[0]]&gt;&lt;/cache_has_attachments&gt;&#xd;
	&lt;is_virtual&gt;&lt;![CDATA[0]]&gt;&lt;/is_virtual&gt;&#xd;
	&lt;state&gt;&lt;![CDATA[1]]&gt;&lt;/state&gt;&#xd;
	&lt;on_sale&gt;&lt;![CDATA[0]]&gt;&lt;/on_sale&gt;&#xd;
	&lt;online_only&gt;&lt;![CDATA[0]]&gt;&lt;/online_only&gt;&#xd;
	&lt;ecotax&gt;&lt;![CDATA[0.000000]]&gt;&lt;/ecotax&gt;&#xd;
	&lt;minimal_quantity&gt;&lt;![CDATA[1]]&gt;&lt;/minimal_quantity&gt;&#xd;
	&lt;price&gt;&lt;![CDATA[${new_price}]]&gt;&lt;/price&gt;&#xd;
	&lt;wholesale_price&gt;&lt;![CDATA[0.000000]]&gt;&lt;/wholesale_price&gt;&#xd;
	&lt;unity&gt;&lt;/unity&gt;&#xd;
	&lt;unit_price_ratio&gt;&lt;![CDATA[0.000000]]&gt;&lt;/unit_price_ratio&gt;&#xd;
	&lt;additional_shipping_cost&gt;&lt;![CDATA[0.00]]&gt;&lt;/additional_shipping_cost&gt;&#xd;
	&lt;customizable&gt;&lt;![CDATA[0]]&gt;&lt;/customizable&gt;&#xd;
	&lt;text_fields&gt;&lt;![CDATA[0]]&gt;&lt;/text_fields&gt;&#xd;
	&lt;uploadable_files&gt;&lt;![CDATA[0]]&gt;&lt;/uploadable_files&gt;&#xd;
	&lt;active&gt;&lt;![CDATA[1]]&gt;&lt;/active&gt;&#xd;
	&lt;redirect_type&gt;&lt;![CDATA[302]]&gt;&lt;/redirect_type&gt;&#xd;
	&lt;id_product_redirected&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_redirected&gt;&#xd;
	&lt;available_for_order&gt;&lt;![CDATA[0]]&gt;&lt;/available_for_order&gt;&#xd;
	&lt;available_date&gt;&lt;![CDATA[0000-00-00]]&gt;&lt;/available_date&gt;&#xd;
	&lt;show_condition&gt;&lt;![CDATA[0]]&gt;&lt;/show_condition&gt;&#xd;
	&lt;condition&gt;&lt;![CDATA[new]]&gt;&lt;/condition&gt;&#xd;
	&lt;show_price&gt;&lt;![CDATA[1]]&gt;&lt;/show_price&gt;&#xd;
	&lt;indexed&gt;&lt;![CDATA[1]]&gt;&lt;/indexed&gt;&#xd;
	&lt;visibility&gt;&lt;![CDATA[both]]&gt;&lt;/visibility&gt;&#xd;
	&lt;advanced_stock_management&gt;&lt;![CDATA[0]]&gt;&lt;/advanced_stock_management&gt;&#xd;
	&lt;date_add&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_add&gt;&#xd;
	&lt;date_upd&gt;&lt;![CDATA[${__time(yyyy-MM-dd HH:mm:ss)}]]&gt;&lt;/date_upd&gt;&#xd;
	&lt;pack_stock_type&gt;&lt;![CDATA[0]]&gt;&lt;/pack_stock_type&gt;&#xd;
	&lt;meta_description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_description&gt;&#xd;
	&lt;meta_keywords&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_keywords&gt;&#xd;
	&lt;meta_title&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/meta_title&gt;&#xd;
	&lt;link_rewrite&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/link_rewrite&gt;&#xd;
	&lt;name&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_brand} | ${productTitle}]]&gt;&lt;/language&gt;&lt;/name&gt;&#xd;
	&lt;description&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/description&gt;&#xd;
	&lt;description_short&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.n11.com/${new_url}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.oolur.com/img/cms/button_SATINAL.png&quot; alt=&quot;&quot; width=&quot;130&quot; height=&quot;32&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Marka        :&lt;/strong&gt; ${new_brand}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Kampanya:&lt;/strong&gt; ${new_campaignName}&lt;/p&gt;&#xd;
&lt;p&gt;&lt;strong&gt;Mağaza      :&lt;/strong&gt; ${new_magaza}&lt;/p&gt;]]&gt;&lt;/language&gt;&lt;/description_short&gt;&#xd;
	&lt;available_now&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_now&gt;&#xd;
	&lt;available_later&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[]]&gt;&lt;/language&gt;&lt;/available_later&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;categories nodeType=&quot;category&quot; api=&quot;categories&quot;&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_secondSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_secondSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subSubCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subSubCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_subCategoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_subCategoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_cocukId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_cocukId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
	&lt;category xlink:href=&quot;http://www.oolur.com/api/categories/${presta_tumkampanyalarId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_tumkampanyalarId}]]&gt;&lt;/id&gt;&#xd;
	&lt;/category&gt;&#xd;
&lt;/categories&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images&quot;&gt;&#xd;
	&lt;image xlink:href=&quot;http://www.oolur.com/api/images/products/442/455&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[455]]&gt;&lt;/id&gt;&#xd;
	&lt;/image&gt;&#xd;
&lt;/images&gt;&#xd;
&lt;combinations nodeType=&quot;combination&quot; api=&quot;combinations&quot;/&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;/&gt;&#xd;
&lt;product_features nodeType=&quot;product_feature&quot; api=&quot;product_features&quot;&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_category}&quot;&gt;&lt;![CDATA[${featureValueId_category}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_brandId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_brandId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_brand}&quot;&gt;&lt;![CDATA[${featureValueId_brand}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_campaignId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_campaignId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_campaign}&quot;&gt;&lt;![CDATA[${featureValueId_campaign}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
	&lt;product_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_magazaId}&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[${presta_magazaId}]]&gt;&lt;/id&gt;&#xd;
	&lt;id_feature_value xlink:href=&quot;http://www.oolur.com/api/product_feature_values/${featureValueId_magaza}&quot;&gt;&lt;![CDATA[${featureValueId_magaza}]]&gt;&lt;/id_feature_value&gt;&#xd;
	&lt;/product_feature&gt;&#xd;
&lt;/product_features&gt;&#xd;
&lt;tags nodeType=&quot;tag&quot; api=&quot;tags&quot;/&gt;&#xd;
&lt;stock_availables nodeType=&quot;stock_available&quot; api=&quot;stock_availables&quot;&gt;&#xd;
	&lt;stock_available xlink:href=&quot;http://www.oolur.com/api/stock_availables/493&quot;&gt;&#xd;
	&lt;id&gt;&lt;![CDATA[493]]&gt;&lt;/id&gt;&#xd;
	&lt;id_product_attribute&gt;&lt;![CDATA[0]]&gt;&lt;/id_product_attribute&gt;&#xd;
	&lt;/stock_available&gt;&#xd;
&lt;/stock_availables&gt;&#xd;
&lt;accessories nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;product_bundle nodeType=&quot;product&quot; api=&quot;products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/product&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/products</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                  <stringProp name="RegexExtractor.refname">productId</stringProp>
                  <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTITLE</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[1898]]&gt;&lt;/id&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search.Sizes" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
SELECT IFNULL(id_attribute, &apos;134&apos;) id_attribute 
FROM psmd_layered_indexable_attribute_lang_value WHERE id_lang=&quot;2&quot; AND 
url_name IN (
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 1) as bir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 2) as iki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 3) as uc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 4) as dort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 5) as bes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 6) as alti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 7) as yedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 8) as sekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 9) as dokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 10) as onn),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 11) as onbir),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 12) as oniki),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 13) as onuc),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 14) as ondort),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 15) as onbes),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 16) as onalti),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 17) as onyedi),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 18) as onsekiz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 19) as ondokuz),
(SELECT SPLIT_STR(&apos;${new_sizes}&apos;, &apos;|&apos;, 20) as yirmi))

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">productSizeIds</stringProp>
                <stringProp name="variableNames">productSizeIds</stringProp>
              </JDBCSampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (SIZES)" enabled="true">
                <stringProp name="ForeachController.inputVal">productSizeIds</stringProp>
                <stringProp name="ForeachController.returnVal">productSizeId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="insert-combination-beden" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;combination&gt;&#xd;
&lt;id_product xmlns=&quot;&quot;&gt;${productId}&lt;/id_product&gt;&#xd;
&lt;location/&gt;&#xd;
&lt;ean13/&gt;&#xd;
&lt;isbn/&gt;&#xd;
&lt;upc/&gt;&#xd;
&lt;quantity&gt;0&lt;/quantity&gt;&#xd;
&lt;reference/&gt;&#xd;
&lt;supplier_reference/&gt;&#xd;
&lt;wholesale_price&gt;0&lt;/wholesale_price&gt;&#xd;
&lt;price&gt;0&lt;/price&gt;&#xd;
&lt;ecotax&gt;0&lt;/ecotax&gt;&#xd;
&lt;weight&gt;0&lt;/weight&gt;&#xd;
&lt;unit_price_impact&gt;0&lt;/unit_price_impact&gt;&#xd;
&lt;minimal_quantity&gt;1&lt;/minimal_quantity&gt;&#xd;
&lt;default_on/&gt;&#xd;
&lt;available_date&gt;2050-01-01&lt;/available_date&gt;&#xd;
&lt;associations&gt;&#xd;
&lt;product_option_values nodeType=&quot;product_option_value&quot; api=&quot;product_option_values&quot;&gt;&#xd;
&lt;product_option_value xlink:href=&quot;http://www.oolur.com/api/product_option_values/${productSizeId}&quot;&gt;&#xd;
&lt;id&gt;&#xd;
&lt;![CDATA[ ${productSizeId} ]]&gt;&#xd;
&lt;/id&gt;&#xd;
&lt;/product_option_value&gt;&#xd;
&lt;/product_option_values&gt;&#xd;
&lt;images nodeType=&quot;image&quot; api=&quot;images/products&quot;/&gt;&#xd;
&lt;/associations&gt;&#xd;
&lt;/combination&gt;&#xd;
&lt;/prestashop&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apikey}@productapi.oolur.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/combinations/products/${productId}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_size" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">featureValueId_size</stringProp>
                    <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOFEATURE</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Product Picture" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.pictureURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${new_pictureDomain}.n11.com.tr</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${new_picture}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">${__property(user.dir)}/images/n11/n11_${productId}_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <stringProp name="FileSaver.variablename">testimagefile</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.images insert" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${testimagefile}" elementType="HTTPFileArg">
                      <stringProp name="File.path">${testimagefile}</stringProp>
                      <stringProp name="File.paramname">image</stringProp>
                      <stringProp name="File.mimetype"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/images/products/${productId}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">2017-02-16 09:28:27</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Set Inactive Existing Products" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product_shop.INACTIVE" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET active=0, visibility=&quot;none&quot; WHERE active=1 AND pack_stock_type=3 AND  
id_product IN (SELECT id_product FROM psmd_product WHERE id_supplier=${supplierId_n11} AND id_product IN 
(SELECT id_product FROM psmd_category_product WHERE id_category=${presta_cocukId})
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PR_ CATEGORY ATTRIBUTE VALUES" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.insert-featurevalue-kategori" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;prestashop xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#xd;
&lt;product_feature_value&gt;&#xd;
	&lt;id_feature xlink:href=&quot;http://www.oolur.com/api/product_features/${presta_categoryId}&quot;&gt;&lt;![CDATA[${presta_categoryId}]]&gt;&lt;/id_feature&gt;&#xd;
	&lt;custom&gt;&lt;![CDATA[0]]&gt;&lt;/custom&gt;&#xd;
	&lt;value&gt;&lt;language id=&quot;2&quot; xlink:href=&quot;http://www.oolur.com/api/languages/2&quot;&gt;&lt;![CDATA[${new_category}]]&gt;&lt;/language&gt;&lt;/value&gt;&#xd;
&lt;/product_feature_value&gt;&#xd;
&lt;/prestashop&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${apikey}@www.oolur.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/product_feature_values</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="featureValueId_category" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">featureValueId_category</stringProp>
            <stringProp name="RegexExtractor.regex">CDATA\[(.+?)\]</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOCATEGORY</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="TestPlan.comments">&lt;id&gt;&lt;![CDATA[130]]&gt;&lt;/id&gt;</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MAGENTO" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer hbqkqdi4h3esqir7t8ttpeay8i5ecj35</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
          <stringProp name="maximumValue">999999</stringProp>
          <stringProp name="minimumValue">100000</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">randomNumber</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products GET" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="searchCriteria" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">nike</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">searchCriteria</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/products</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="categories" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="searchCriteria" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">nike</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">searchCriteria</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/categories</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.product attributes" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="searchCriteria" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">nike</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">searchCriteria</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/products/attributes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.product attributes code" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="searchCriteria" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">nike</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">searchCriteria</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/products/attributes/1</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.product attr types" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="searchCriteria" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">nike</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">searchCriteria</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/products/attributes/types</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products attr group" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="searchCriteria" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">nike</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">searchCriteria</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/products/attribute-sets/groups/list</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products attr SetId" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="searchCriteria" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">nike</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">searchCriteria</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/products/attribute-sets/1/attributes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products attr code options" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="searchCriteria" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">nike</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">searchCriteria</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/products/attributes/1/options</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="products/links/types" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/products/links/types</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="products/jmeter-test-660022/links/1" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/products/jmeter-test-660022/links/related</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.products POST" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;product&quot;: {&#xd;
    &quot;sku&quot;: &quot;jmeter-test-${randomNumber}&quot;,&#xd;
    &quot;name&quot;: &quot;Jmeter Test ${randomNumber}&quot;,&#xd;
    &quot;attributeSetId&quot;: 4,&#xd;
    &quot;price&quot;: 19,&#xd;
    &quot;status&quot;: 1,&#xd;
    &quot;visibility&quot;: 4,&#xd;
    &quot;typeId&quot;: &quot;virtual&quot;,&#xd;
    &quot;createdAt&quot;: &quot;2017-04-03 15:21:24&quot;,&#xd;
    &quot;updatedAt&quot;: &quot;2017-04-03 15:21:24&quot;,&#xd;
    &quot;extension_attributes&quot;:{  &#xd;
      &quot;stock_item&quot;:{  &#xd;
         &quot;item_id&quot;:6,&#xd;
         &quot;product_id&quot;:6,&#xd;
         &quot;stock_id&quot;:1,&#xd;
         &quot;qty&quot;:1,&#xd;
         &quot;is_in_stock&quot;:true,&#xd;
         &quot;is_qty_decimal&quot;:false,&#xd;
         &quot;show_default_notification_message&quot;:false,&#xd;
         &quot;use_config_min_qty&quot;:true,&#xd;
         &quot;min_qty&quot;:0,&#xd;
         &quot;use_config_min_sale_qty&quot;:1,&#xd;
         &quot;min_sale_qty&quot;:1,&#xd;
         &quot;use_config_max_sale_qty&quot;:true,&#xd;
         &quot;max_sale_qty&quot;:10000,&#xd;
         &quot;use_config_backorders&quot;:true,&#xd;
         &quot;backorders&quot;:0,&#xd;
         &quot;use_config_notify_stock_qty&quot;:true,&#xd;
         &quot;notify_stock_qty&quot;:1,&#xd;
         &quot;use_config_qty_increments&quot;:true,&#xd;
         &quot;qty_increments&quot;:0,&#xd;
         &quot;use_config_enable_qty_inc&quot;:true,&#xd;
         &quot;enable_qty_increments&quot;:false,&#xd;
         &quot;use_config_manage_stock&quot;:true,&#xd;
         &quot;manage_stock&quot;:true,&#xd;
         &quot;low_stock_date&quot;:null,&#xd;
         &quot;is_decimal_divided&quot;:false,&#xd;
         &quot;stock_status_changed_auto&quot;:0&#xd;
      }&#xd;
   },&#xd;
&quot;custom_attributes&quot;:[  &#xd;
      {  &#xd;
         &quot;attribute_code&quot;:&quot;category_ids&quot;,&#xd;
         &quot;value&quot;:[6]&#xd;
      },&#xd;
        {  &#xd;
               &quot;attribute_code&quot;:&quot;marka&quot;,&#xd;
               &quot;value&quot;:&quot;Nike&quot;&#xd;
            },&#xd;
            {  &#xd;
               &quot;attribute_code&quot;:&quot;beden&quot;,&#xd;
               &quot;value&quot;:&quot;24,25,27&quot;&#xd;
            },&#xd;
            {  &#xd;
               &quot;attribute_code&quot;:&quot;magaza&quot;,&#xd;
               &quot;value&quot;:&quot;Trendyol&quot;&#xd;
            },&#xd;
            {  &#xd;
               &quot;attribute_code&quot;:&quot;renk&quot;,&#xd;
               &quot;value&quot;:&quot;28,30&quot;&#xd;
            }&#xd;
      ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">207.154.210.70</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/V1/products</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree " enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">bigBoutiqueImage&quot; src=&apos;(.+?)&apos; title=&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PR_HOME" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488371101000</longProp>
        <longProp name="ThreadGroup.end_time">1488371101000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Banners" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.update-clean" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_info_lang SET text=&quot;&quot; WHERE id_lang=2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TY" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TY.home" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.trendyol.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
                <stringProp name="RegexExtractor.regex">bigBoutiqueImage(.+?)=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/(.+?)&apos; title</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">bigBoutiqueImage lazy-load-trigger&quot; src=&quot;/Resources/images/bigBoutiquePlaceHolder.png&quot; data-original=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/200217/bambi_230217_new.jpg&apos;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
                <stringProp name="RegexExtractor.regex">bigBoutiqueImage(.+?)=&apos;https://img-trendyol.mncdn.com//Assets/ProductImages/(.+?)&apos; title=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$3$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
                <stringProp name="RegexExtractor.regex">boutiqueNavigationClick\(&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">boutiqueNavigationClick(&apos;158529&apos;</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
              <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
              <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.endIndex">15</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.update-banner" enabled="false">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">UPDATE psmd_info_lang SET text=CONCAT(text, &quot;&lt;a target=_blank href=&quot;&quot;https://www.trendyol.com/trendyol/ButikDetay/${__V(boutiqueIds_${counter_boutique}_g1)}&quot;&quot; &gt; &lt;img src=&quot;&quot;https://img-trendyol.mncdn.com//Assets/ProductImages/${imageUrl}&quot;&quot; width=958 height=251 /&gt;&lt;/a&gt;&lt;p&gt;&lt;a target=_blank href=&quot;&quot;https://www.trendyol.com/trendyol/ButikDetay/${__V(boutiqueIds_${counter_boutique}_g1)}&quot;&quot; &gt;&lt;span style=background-color:#000000;color:#FFFFFF&gt;TRENDYOL / ${__V(bigBoutiqueNames_${counter_boutique}_g3)}&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&quot;) WHERE id_lang=2</stringProp>
                <stringProp name="queryArguments">${imageUrl},${__V(bigBoutiqueNames_${counter_boutique}_g2)}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.update-banner" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">UPDATE psmd_info_lang SET text=CONCAT(text, &quot;&lt;a target=_blank href=&quot;&quot;https://www.trendyol.com/trendyol/ButikDetay/${__V(boutiqueIds_${counter_boutique}_g1)}&quot;&quot; &gt; &lt;img src=&quot;&quot;https://img-trendyol.mncdn.com//Assets/ProductImages/${imageUrl}&quot;&quot; width=958 height=251 /&gt;&lt;/a&gt;&quot;) WHERE id_lang=2</stringProp>
                <stringProp name="queryArguments">${imageUrl},${__V(bigBoutiqueNames_${counter_boutique}_g2)}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MRKFN" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MAR.home" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.markafoni.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;img data-original=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
                <stringProp name="RegexExtractor.regex">width-full item campaign&quot; data-name=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
                <stringProp name="RegexExtractor.regex">img-container&quot;&gt;\s+&lt;a href=&quot;http://www.markafoni.com/kampanya/(.+?)/&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot;img-container&quot;&gt;
					&lt;a href=&quot;</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
              <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
              <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.endIndex">10</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.update-banner" enabled="false">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
UPDATE psmd_info_lang SET text=CONCAT(text, &quot;&lt;a target=_blank href=https://www.markafoni.com/kampanya/${__V(boutiqueIds_${counter_boutique}_g1)}/ &gt; &lt;img src=${imageUrl} width=958 height=251 /&gt;&lt;/a&gt;&lt;p&gt;&lt;a target=_blank href=https://www.markafoni.com/kampanya/${__V(boutiqueIds_${counter_boutique}_g1)}/ &gt;&lt;span style=background-color:#000000;color:#FFFFFF&gt;MARKAFONİ / ${__V(bigBoutiqueNames_${counter_boutique}_g1)}&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&quot;) WHERE id_lang=2</stringProp>
                <stringProp name="queryArguments">${imageUrl},${__V(bigBoutiqueNames_${counter_boutique}_g1)}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.update-banner" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
UPDATE psmd_info_lang SET text=CONCAT(text, &quot;&lt;a target=_blank href=https://www.markafoni.com/kampanya/${__V(boutiqueIds_${counter_boutique}_g1)}/ &gt; &lt;img src=${imageUrl} width=958 height=251 /&gt;&lt;/a&gt;&quot;) WHERE id_lang=2</stringProp>
                <stringProp name="queryArguments">${imageUrl},${__V(bigBoutiqueNames_${counter_boutique}_g1)}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MOR" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MOR.home" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.morhipo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/kampanya/alisveris</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">http://www.markafoni.com/kampanya/kadin-7326</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueImageUrls" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueImageUrls</stringProp>
                <stringProp name="RegexExtractor.regex">img src=&apos;/Content/imagesResp/spacer-ps-lg.png&apos; data-src=&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bigBoutiqueNames" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bigBoutiqueNames</stringProp>
                <stringProp name="RegexExtractor.regex">&apos; class=&apos;lazyload&apos; alt=&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="boutiqueIds" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">boutiqueIds</stringProp>
                <stringProp name="RegexExtractor.regex">&quot; href=&quot;/kampanya/liste/(.+?)&quot; target=&quot;_parent&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">/</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&quot; href=&quot;/kampanya/liste/54855/dunyaca-unlu-gozluk-markalari&quot; target=&quot;_parent&quot;
</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.counterReset" enabled="true">
              <stringProp name="BeanShellSampler.query">String x = &quot;0&quot;;

int y = Integer.parseInt(x);

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller (BUTİK)" enabled="true">
              <stringProp name="ForeachController.inputVal">bigBoutiqueImageUrls</stringProp>
              <stringProp name="ForeachController.returnVal">imageUrl</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.endIndex">5</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Script.Boutique" enabled="true">
                <stringProp name="BeanShellSampler.query">String x = vars.get(&quot;counter_boutique&quot;);

int y = Integer.parseInt(x);
y = y + 1;

String z = &quot;&quot; + y;

vars.put(&quot;counter_boutique&quot;, z);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.update-banner" enabled="true">
                <stringProp name="dataSource">mysqlcon</stringProp>
                <stringProp name="query">
UPDATE psmd_info_lang SET text=CONCAT(text, &quot;&lt;a target=_blank href=https://www.morhipo.com/kampanya/liste/${__V(boutiqueIds_${counter_boutique}_g1)}/ &gt; &lt;img src=${imageUrl} width=958 height=251 /&gt;&lt;/a&gt;&quot;) WHERE id_lang=2</stringProp>
                <stringProp name="queryArguments">${imageUrl},${__V(bigBoutiqueNames_${counter_boutique}_g1)}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PR_SHOPSETTINGS" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488371101000</longProp>
        <longProp name="ThreadGroup.end_time">1488371101000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ChangeShopProducts" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.stock_available.ChangeShopProducts" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_stock_available SET id_shop=1 WHERE id_shop=2

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.layered_product_attribute.ChangeShopProducts" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_layered_product_attribute SET id_shop=1 WHERE id_shop=2

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.product_attribute_shop.ChangeShopProducts" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_attribute_shop SET id_shop=1 WHERE id_shop=2 AND id_product &lt;&gt; 0

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.product_shop.ChangeShopProducts" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product_shop SET id_shop=1 WHERE id_shop=2 AND active=1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.psmd_product.ChangeShopProducts" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_product SET id_shop_default=1 WHERE id_shop_default=2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CategoryUpdate" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.clean-categories" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_cms_lang SET content=&quot;&lt;center&gt;&quot; WHERE id_cms=${Id_Cms_Categories} AND id_lang=2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-categories" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">SELECT DISTINCT value FROM psmd_feature_value_lang WHERE id_lang =2 AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_categoryId}
) ORDER BY value ASC</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">resultCategory</stringProp>
            <stringProp name="variableNames">categoryNames</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">categoryNames</stringProp>
            <stringProp name="ForeachController.returnVal">categoryName</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.add-category" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">UPDATE psmd_cms_lang SET content=CONCAT(content, &quot;&lt;p&gt;&lt;a href=&quot;&quot;http://www.oolur.com/arama?controller=search&amp;s=${categoryName}&quot;&quot;&gt;${categoryName}&lt;/a&gt;&lt;/p&gt;&quot;) WHERE id_cms=${Id_Cms_Categories}  AND id_lang=2

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BrandUpdate" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.clean-brands" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">UPDATE psmd_cms_lang SET content=&quot;&lt;center&gt;&quot; WHERE id_cms=${Id_Cms_Brands} AND id_lang=2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.search-brands" enabled="true">
            <stringProp name="dataSource">mysqlcon</stringProp>
            <stringProp name="query">SELECT DISTINCT value FROM psmd_feature_value_lang WHERE id_lang =2 AND id_feature_value
IN (
SELECT id_feature_value
FROM psmd_feature_value
WHERE id_feature =${presta_brandId}
) ORDER BY value ASC</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">resultBrand</stringProp>
            <stringProp name="variableNames">brandNames</stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">brandNames</stringProp>
            <stringProp name="ForeachController.returnVal">brandName</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL.add-brand" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">UPDATE psmd_cms_lang SET content=CONCAT(content, &quot;&lt;p&gt;&lt;a href=&quot;&quot;http://www.oolur.com/arama?controller=search&amp;s=${brandName}&quot;&quot;&gt;${brandName}&lt;/a&gt;&lt;/p&gt;&quot;) WHERE id_cms=${Id_Cms_Brands} AND id_lang=2</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AttributeIndexing" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.AttributeIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-attribute-indexer.php?token=2311e46336</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PriceIndexing" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.searchPriceIndexingTask" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/modules/ps_facetedsearch/ps_facetedsearch-price-indexer.php?token=2311e46336&amp;full=1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">https://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SearchIndexing" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.SearchIndexingTask.Full" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/prestaadmin/searchcron.php?full=1&amp;token=anm7kxyq&amp;redirect=1&amp;id_shop=1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRESTA.Run.SearchIndexingTask" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.oolur.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/prestaadmin/searchcron.php?token=anm7kxyq&amp;redirect=1&amp;id_shop=1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">http://www.oolur.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SEFAMERVE" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1488991767000</longProp>
        <longProp name="ThreadGroup.end_time">1488991767000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TOZLU" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="COLINS" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FLO" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MAVI" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BEYMEN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GOLD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GULAYLAR" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NETWORK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FABRIKA" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DIVARESE" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="KIGILI" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SUPERSTEP" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CETINKAYA" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ALTINBAŞ" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VAKKO" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MUDO" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SARAR" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PENTI" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LIDYANA" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MIZU" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BONPRIX" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DOLAP" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MODACRUZ" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GARDROPS" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="JOKER" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="EBEBEK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SAATSAAT" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NETWORK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="YALISPOR" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DEICHMANN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ZARA" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489755884000</longProp>
        <longProp name="ThreadGroup.end_time">1489755884000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
